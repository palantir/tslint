$.x = 3;
~        [variable '$' used before declaration]
import $ from "./$";
var vara = varb, varb;
           ~~~~        [variable 'varb' used before declaration]

class Test {
    constructor() {
        this.a = 3;
    }

    a;
}

var i = j;
        ~  [variable 'j' used before declaration]

class ClassA {
    prop;
    constructor(object) {
        this.prop = object.prop;
    }
}

class ClassB {
    prop;
}

var j;

if (something) {
    var defined = 1;
} else {
    var defined;
}

testUndeclaredImports(); // Function early reference OK

function testUndeclaredImports() {
    console.log(foo1);
                ~~~~   [variable 'foo1' used before declaration]
    console.log(foo2);
                ~~~~   [variable 'foo2' used before declaration]
    console.log(foo3);
                ~~~~   [variable 'foo3' used before declaration]
    map([], (x) => x);
    ~~~                [variable 'map' used before declaration]
}

import { default as foo1 } from "./lib";
import foo2 from "./lib";
import _, { map, foldl } from "./underscore";
import * as foo3 from "./lib";
import "./lib";

export default function () {
    //
};

export {
    undeclaredA,
    ~~~~~~~~~~~ [variable 'undeclaredA' used before declaration]
    undeclaredB,
    ~~~~~~~~~~~ [variable 'undeclaredB' used before declaration]
    undeclaredC,
    ~~~~~~~~~~~ [variable 'undeclaredC' used before declaration]
    testUndeclaredImports
};

var undeclaredA = 42;
let { undeclaredB } = { undeclaredB: 43 };
const [ undeclaredC, [undeclaredD] ] = [ 1, [2] ];

// shouldn't crash tslint
function a() {
    var b = ({c: dog}) => { dog++; };
    b({ c: 5 });
}
