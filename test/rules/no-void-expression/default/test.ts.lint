function doIt() {}
async function doAsync() {}
function print(strs) {}

[].forEach(x => console.log(x));
                ~~~~~~~~~~~~~~ [0]

[].forEach(x => {
    console.log(x);
});

[].forEach(x => x && console.log(x));
                ~~~~~~~~~~~~~~~~~~~ [0]
                     ~~~~~~~~~~~~~~ [0]

async function f(): Promise<void> {
    const x = doIt();
              ~~~~~~  [0]
    console.log(await doAsync());
                ~~~~~~~~~~~~~~~  [0]
    return print``;
           ~~~~~~~  [0]
}

true && console.log(0);
false || console.log(0);

runner(() => "x");
             ~~~  [0]
runner(() => ({x: "x"}));
             ~~~~~~~~~~  [0]
listRunner(() => "x");
                 ~~~  [0]
listRunner(() => "x", stringer, console.log, () => "x");
                 ~~~  [0]
                                                   ~~~  [0]
maybeRunner(() => "x");
                  ~~~  [0]
runner(stringer);

declare function doIt(): void;
declare function doAsync(): Promise<void>;
declare function print(strs: TemplateStringsArray): void;
declare function runner(x: () => void): void;
declare function listRunner(...x: Array<() => void>): void;
declare function maybeRunner(x?: () => void): void;
declare function stringer(): string;

!!data ? console.info(message, data) : console.info(message);

[0]: Expression has type `void`. Put it on its own line as a statement.
