// good

interface i1 {
    a();
    a(x: number);
    b();
    b(x: string);
}

interface i2 {
    a();
    a(x: number);
    a(): void;
    b();
    b(x: string);
}

interface i3 {
    a();
    "a"();
}

interface i4 {
    a();
    ["a"]();
}

interface i5 {
    a(): string;
    bar: {
        a(): number;
    }
}

interface i6 {
    // ensure no false positives for properties/methods available from prototype chain
    toString(): string;
}


// bad

interface b1 {
    a();
    a(x: number);
    b();
    b(x: string);
    a(x: string);
    ~~~~~~~~~~~~~  [All 'a' signatures should be adjacent]
}

interface b2 {
    a();
    a(x: number);
    b();
    b(x: string);
    a(): void;
    ~~~~~~~~~~  [All 'a' signatures should be adjacent]
}

interface b3 {
    a();
    12();
    "a"();
    ~~~~~~  [All 'a' signatures should be adjacent]
    12();
    ~~~~~  [All '12' signatures should be adjacent]
}

interface b4 {
    a();
    b(): void;
    ["a"](v: number): void;
    ~~~~~~~~~~~~~~~~~~~~~~~  [All 'a' signatures should be adjacent]
}

interface b5 {
    a(): string;
    bar: {
        a(): number;
        b();
        a(b: number): void;
        ~~~~~~~~~~~~~~~~~~~  [All 'a' signatures should be adjacent]
    }
}

// Also works in classes, source files, modules, namespaces

class C {
    a(): void;
    b(): void;
    a(x: number): void;
    ~~~~~~~~~~~~~~~~~~~  [All 'a' signatures should be adjacent]
}

declare function a(): void;
declare function b(): void;
declare function a(x: number): void;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [All 'a' signatures should be adjacent]

declare module "m" {
    export function a(): void;
    export function b(): void;
    export function a(x: number): void;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [All 'a' signatures should be adjacent]
}

declare namespace N {
    export function a(): void;
    export function b(): void;
    export function a(x: number): void;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [All 'a' signatures should be adjacent]
}

class Foo {
  public static bar() {}
  constructor() {}
  public bar() {}
}