let s: string;
let n: number;
let o: Object;
let l: { a: number, b: string };
let t: [number, string];
let p: Wrapper<string>;
let f: () => void;
type EmptyFunc = () => void;
let voidFunc: () => void;
let stringFunc: () => string;
function WrapperFunc<T>(x?: T): T {
	return x;
}
function CurriedFunc<T>(h?: () => T): () => T {
	return h;
}
function MultiParamFunction<T, U>(x?: T, y?: U): T {
	return x;
}
class Wrapper<T> {
	val: T;
}
class MultiParamsClass<U, T> {
	val1: T;
	val2: U;
}

/* Bad */
WrapperFunc();
~~~~~~~~~~~~~  [Explicit type parameter needs to be provided to the function call]
CurriedFunc();
~~~~~~~~~~~~~  [Explicit type parameter needs to be provided to the function call]
MultiParamFunction();
~~~~~~~~~~~~~~~~~~~~  [Explicit type parameter needs to be provided to the function call]
new Wrapper();
~~~~~~~~~~~~~  [Explicit type parameter needs to be provided to the constructor]
new MultiParamsClass();
~~~~~~~~~~~~~~~~~~~~~~  [Explicit type parameter needs to be provided to the constructor]

/* Good */
WrapperFunc<Object>();
WrapperFunc<string>();
WrapperFunc<number>();
WrapperFunc(s);
WrapperFunc(n);
WrapperFunc(o);
WrapperFunc(l);
WrapperFunc(t);
WrapperFunc(p);
WrapperFunc(f);
WrapperFunc<() => {}>();

WrapperFunc<() => void>();
WrapperFunc<{ a: number }>();
WrapperFunc<{ [x: number]: string }>();
WrapperFunc<{ [x: string]: string }>();

CurriedFunc(voidFunc);
CurriedFunc(stringFunc);

MultiParamFunction<string, {}>();
MultiParamFunction<{}, number>();
MultiParamFunction<string, number>();
MultiParamFunction<{ a: number }, string>();
MultiParamFunction<() => {}, () => void>();
MultiParamFunction<() => void, () => {}>();
MultiParamFunction<() => void, () => void>();
MultiParamFunction<{ [x: number]: string }, () => void>();
MultiParamFunction<{ [x: string]: string }, number>();

new Wrapper<string>();
new Wrapper<() => void>();
new Wrapper<() => {}>();
new Wrapper<{ a: number }>();
new Wrapper<{ [x: number]: string }>();
new Wrapper<{ [x: string]: string }>();

new MultiParamsClass<string, {}>();
new MultiParamsClass<{}, number>();
new MultiParamsClass<string, number>();
new MultiParamsClass<{ a: number }, string>();
new MultiParamsClass<() => {}, () => void>();
new MultiParamsClass<() => void, () => {}>();
new MultiParamsClass<() => void, () => void>();
new MultiParamsClass<{ [x: number]: string }, () => void>();
new MultiParamsClass<{ [x: string]: string }, number>();

// don't crash with stack overflow
import {expect} from "chai";
expect(1).to.eq(1);
