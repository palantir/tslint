const arrowLambda = () => {};
const functionVar = function () {};

class Class {
    public constructor() { }

    public bind() { }

    public method() { }
}

const instance = new Class();

arrowLambda;
arrowLambda;
arrowLambda;
arrowLambda.bind(this, 1);
arrowLambda.bind(this, undefined);

functionVar.bind(this);
functionVar.bind(functionVar);
functionVar.bind(undefined);
functionVar.bind(this, 1);
functionVar.bind(this, undefined);

const immediatelyBoundFunction = () => {};
const immediatelyBoundFunctionReturn = (i: number) => { return i; };
const immediatelyBoundFunctionWrapped = () => {};
const immediatelyBoundFunctionWrappedReturn = (i: number) => { return i; };
const immediatelyBoundFunctionArgs = function (i: number) {}.bind(this, 1);
const immediatelyBoundFunctionArgsReturn = function (i: number) { return i; }.bind(this, 1);

const immediatelyBoundArrow = (i: number) => i;
const immediatelyBoundArrowArgs = ((i: number) => i).bind(this, 1);
const immediatelyBoundArrowArgsReturn = function (i: number) { return i; }.bind(this, 1);

instance.method.bind(this);
instance.bind(this);
Class.bind(this);
