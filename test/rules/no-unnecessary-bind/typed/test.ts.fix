const arrowLambda = () => {};
const functionVar = function () {};

declare const stubDecorator: any;

class Class {
    public constructor() { }

    public bind() { }

    public method() { }

    public boundFunction = () => {}

    public boundAsyncFunction = async () => {}

    @stubDecorator
    public decorated = function () {}.bind(this)
}

const instance = new Class();

arrowLambda;
arrowLambda;
arrowLambda;
arrowLambda.bind(this, 1);
arrowLambda.bind(this, undefined);

functionVar.bind(this);
functionVar.bind(functionVar);
functionVar.bind(undefined);
functionVar.bind(this, 1);
functionVar.bind(this, undefined);

const immediatelyBoundFunction = () => {};
const immediatelyBoundFunctionReturn = (i: number): number => { return i; };
const immediatelyBoundFunctionWrapped = () => {};
const immediatelyBoundFunctionWrappedReturn = (i: number): number => { return i; };
const immediatelyBoundFunctionArgs = function (i: number): number {}.bind(this, 1);
const immediatelyBoundFunctionArgsReturn = function (i: number): number { return i; }.bind(this, 1);
const immediatelyBoundFunctionNameUnused = () => { functionVar(); };
const immediatelyBoundFunctionNameUsed = function foo() { foo(); }.bind(this);

const immediatelyBoundArrow = (i: number) => i;
const immediatelyBoundArrowArgs = ((i: number) => i).bind(this, 1);
const immediatelyBoundArrowArgsReturn = function (i: number): number { return i; }.bind(this, 1);

const asyncFunction = async () => {};
const asyncFunctionReturn = async (): number => { return 1; };
const asyncArrow = async () => {};
const asyncArrowReturn = async (): number => { return 1; };

(function* generator() {}).bind(this);
instance.method.bind(this);
instance.bind(this);
Class.bind(this);
