"use strict";
'use asm';
"ngInject";
'';

function fun1() {
    "use strict";
    'someOtherDirective';
    return 0;
}

(function() { "directive";
'foo'
'directive2'
console.log('foo');
'notdirective';
~~~~~~~~~~~~~~~ [0]
})();

const a = () => {
'use strict'; "use cool"; "use lint"; var a = 1; "notdirective"; }
                                                 ~~~~~~~~~~~~~~~ [0]

function fun2(a: number) {
    return 0;
}

function fun3(a: number, b: number) {
    return 0;
}

namespace Fam { 'use strict'; 'use cool'; }
module Bam { 'use strict'; 'use cool'; }
namespace Az.Bz.Cz.Dz {
    'ngInject';
}

class Foo {
    constructor() {
        "ngInject";
        var a = 1;
        'notdirective';
        ~~~~~~~~~~~~~~~ [0]
    }

    bar() {
        'use strict';
    }

    get baz() {
        'use asm';
    }

    set baz(newValue) {
        "use asm";
    }
}

// valid code:

var i: number;
var j = 3;
i = 1 + 2;
j = fun1();
fun1();
fun2(2);
fun3(2, fun1());
i++;
i += 2;
--i;
i <<= 2;
i = fun1() + fun1();
j = (j === 0 ? 5 : 6);
(j === 0 ? fun1() : fun2(j));
(a => 5)(4);
var obj = {};
delete obj.key;
function* g(): Iterable<number> {
    for (let i = 0; i < 100; i++) {
        yield i;
    }
}

async function f(foo: Promise<void>): Promise<number> {
    await foo;
    return 0;
}

new Foo();
~~~~~~~~~~ [0]

// invalid code:

5;
~~ [0]
i;
~~ [0]
3 + 5;
~~~~~~ [0]
fun1() + fun1();
~~~~~~~~~~~~~~~~ [0]
fun2(i) + fun3(4,7);
~~~~~~~~~~~~~~~~~~~~ [0]
fun1() + 4;
~~~~~~~~~~~ [0]
4 + fun2(j);
~~~~~~~~~~~~ [0]
(j === 0 ? fun1() : 5);
                    ~ [0]
(j === 0 ? i : fun2(j));
           ~ [0]
a => fun2(a);
~~~~~~~~~~~~~ [0]
() => {return fun1();};
~~~~~~~~~~~~~~~~~~~~~~~ [0]
"use strct";
~~~~~~~~~~~~ [0]

afterEach((el) => {
   el && el.remove();
   ~~~~~~~~~~~~~~~~~~ [0]
});

checkParams((a, b) => {
   (a || required('a')) && (b || required('b'));
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [0]
});

checkParams((a, b) => {
   ((a && b) || required('a, b'));
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [0]
});

function interactionHandler(e) {
    // fails in all cases since logical NOT operator is redundant
    e && !e.preventDefault();
    ~~~~~~~~~~~~~~~~~~~~~~~~~ [0]
}

a && b ? a : b;
~~~~~~~~~~~~~~~ [0]

a && b;
~~~~~~~ [0]
a() && b;
~~~~~~~~~ [0]
a() && b();
~~~~~~~~~~~ [0]

let var1, var2;
if (foo)
    var1 = 1, var2 = 1;
else
    var1 = 2, var2;
              ~~~~ [0]
var1, var2;
~~~~~~~~~~~ [0]

(0,eval)('"foobar";');
(foo,eval)('"foobar";');
 ~~~ [0]
(foo(),eval)('"foobar";');
(foo(), 0, eval)('"foobar";');
        ~ [0]
(0, 1, eval)('"foobar";');
 ~~~~ [0]
(1, eval)('"foobar";');
 ~ [0]
(0, foo)('"foobar";');
 ~ [0]
var2 = (0, 1, 2);
        ~~~~ [0]
(0, 1, 2);
~~~~~~~~~~ [0]
(0, 1, foo());
 ~~~~ [0]

var1 = void 0;
var1 = void(0);
var1 = void 1;
            ~ [0]
var1 = void(1);
           ~~~ [0]
var1 = void foo;
            ~~~ [0]
var1 = void foo === bar;
            ~~~ [0]

var1 = void (foo === bar);
            ~~~~~~~~~~~~~ [0]
var1 = void (foo = bar);
var1 = void foo.bar;
            ~~~~~~~ [0]
var1 = void foo();

void foo();
void (foo && foo());
~~~~~~~~~~~~~~~~~~~~ [0]
void 0;
~~~~~~~ [0]
void (foo = bar);
void 1;
~~~~~~~ [0]
foo ? bar = foo : void 0;
                  ~~~~~~ [0]
var1 = foo ? void (foo && foo()) : void 0;

switch(l) {
  case 0, 1:
       ~ [0]
    return 'zero or one';
  default:
    return 'more than one';
}

let x = Math.pow((3, 5));
                  ~ [0]
let a = [(3 + 4), ((1 + 1, 8) * 4)];
                    ~~~~~ [0]

`foo`;
~~~~~~ [0]
foo`bar`;
~~~~~~~~~ [0]

[0]: unused expression, expected an assignment or function call
