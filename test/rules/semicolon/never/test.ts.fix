declare module "*"
declare module "foo" {}
var x = 3
a += b

c = () => {
}

d = function() { }

console.log("i am adam, am i?")

function xyz() {
    return
}

switch(xyz) {
    case 1:
        break
    case 2:
        continue
}

throw new Error("some error")

do {
    var a = 4
} while(x == 3)

debugger

import v = require("i")
module M {
    export var x
    []
    export var y = x;
    []
    export function f(s: string): string
    export function f(n: number): number
    export function f(x: any) { return x }
}

declare module "M" {
    function f(): number
    function g(): number
}

function useStrictUnnecessarySemicolon() {
    "use strict"
    return null
}

class MyClass {
    public name : string
    private index : number
    private email : string
    public initializedProperty = 6
    public initializedMethodProperty = () => {
        return "hi"
    }

    public initializedMethodPropertyWithoutSemicolon = () => {
        return "hi again"
    }

    public initializedMethodProperty1Line = () => { return "hi" }

    public initializedMethodPropertyWithoutSemicolon1Line = () => { return "hi again" }
    public someMethod(): void
    public someMethod(param): void
    public someMethod(param?) {
        return
    }
}

interface ITest {
    foo?: string
    bar: number
    qux: string,
    baz: boolean
    bas: never}

import {Router} from 'aurelia-router'

import {Controller} from 'my-lib'

// Edge cases when not omitting semicolon needs to be supported

var a = 1;
("1" + "2").length

var a = 1;
[].length

var a = 1;
+"a"

var a = 1;
-1

var a = 1
;("1" + "2").length

var a = 1
;[].length

var a = 1
;+"a"

var a = 1
;-1

// For loops uses semicolons as well so make sure we aren't breaking those

for (var i = 0; i < 10; ++i) {
  // do something
}

export default LoginPage
export default LoginPage

export = Date
export = Date

type t = number
type t = number

if (true);
for(;;);



switch(foo.bar) {
    case 'header':  header  = foo; break
    case 'sidebar': sidebar = foo; break
    case 'track':   track   = foo; /* some comment */ break
}

switch(foo.bar) {
    case 'header':  header  = foo
        break
    case 'sidebar': sidebar = foo /* some comment
        */ break
    case 'track':   track   = foo // some comment
        break
}

const x = f(() =>
    0); const y = 2

a = b
++c

foo();
(bar).foo()

foo();
(bar as Bar).foo()

foo();
<Bar>bar.foo()

foo();
() => {}

foo();
`bar`

foo();
`bar${baz}`

a;
/b/g

a;
/=b/i

function bar(foo) { if (foo) return true; return false }
function bar(foo) { if (foo) {return true} return false}

class Foo {
    public [foo]
    ['moo']
    public bar = foo;
    ['foo']
    public baz = () => true;
    ['foobar']
    public baz2 = () => () => {return true}
    ['foobarbaz']
    public bas = () => {return true}
    ['barfoo']
    public moar = () =>
        true;
    ['barbaz']
}

declare module "foo";
{ /* don't remove semicolon, otherwise the shorthand module get's a body */ }

function *gen() {
    yield
    []
    yield 1;
    []
    if (foo)
        return yield
    []
    if (!foo)
        return yield 1 || yield
    []
    return yield 1;
    []
}

var foo = () => {}
[]
var bar; var foo = function() {};
[]

var
[]

const
[]

let
[]
