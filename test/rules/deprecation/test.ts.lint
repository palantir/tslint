import def, {other, other2 as foobar, notDeprecated, notDeprecated2} from './other.test';
       ~~~ [errmsg % ('def', 'deprecated default export')]
             ~~~~~          [errmsg % ('other', 'reason')]
                    ~~~~~~  [err % ('other2')]
import * as other2 from './other2.test';
            ~~~~~~ [err % ('other2')]
other();
~~~~~ [errmsg % ('other', 'reason')]
foobar();
~~~~~~ [err % ('foobar')]

declare interface D {
    /** @deprecated */ m: () => void;
}

declare let d: D;
d.m();
  ~ [err % ('m')]

/**
 * Some text
 * @one-tag
 * @deprecated reason is this
 * @two-tag
 */
export class P {
    /** @deprecated */ f: string;
    g,
    /** @deprecated Use g instead.*/ h: number;
}

let p = new P();
            ~ [errmsg % ('P', 'reason is this')]
let pf = p.f;
           ~ [err % ('f')]
pf; // that indirection is allowed
p.g;
p.h;
  ~ [errmsg % ('h', 'Use g instead.')]

interface I extends P {}
                    ~ [errmsg % ('P', 'reason is this')]
declare var i: I;
i.f;
  ~ [err % ('f')]
i.g;

/** @deprecated */
const A = 1, B = 2;

A + B;
~     [err % ('A')]
    ~ [err % ('B')]

declarationIsMissing();

function fn<T>(): T;
/** @deprecated */
function fn(bar: any): any;
function fn() { }

fn<number>();
fn(1);
~~ [err % ('fn')]
fn;
~~ [err % ('fn')]

class TestClass {
    /** @deprecated */
    static method(): void;
    static method(param): void;
    static method(param?): void {}
}

TestClass.method();
          ~~~~~~ [err % ('method')]
TestClass.method(1);

interface TestInterface {
    /** @deprecated */
    method(): void;
    method(param): void;
}
declare let interfaceTest: TestInterface;
interfaceTest.method();
              ~~~~~~ [err % ('method')]
interfaceTest.method(1);

declare let callSignatureTest: {
    /** @deprecated */
    (): void;
    (param): void;
}
callSignatureTest();
~~~~~~~~~~~~~~~~~ [err % ('callSignatureTest')]
callSignatureTest(1);

/** @deprecated */
declare let variableWithCallSignature: {
    (): void;
}
variableWithCallSignature();
~~~~~~~~~~~~~~~~~~~~~~~~~ [err % ('variableWithCallSignature')]

/** @deprecated */
declare let variableWithCallSignature2: () => void;
variableWithCallSignature2();
~~~~~~~~~~~~~~~~~~~~~~~~~~ [err % ('variableWithCallSignature2')]

function dedent(strings: TemplateStringsArray, ...values: string[]): string;
function dedent(strings: TemplateStringsArray, ...values: number[]): string;
/** @deprecated */
function dedent(strings: TemplateStringsArray, ...values: any[]): string;
function dedent(strings: TemplateStringsArray, ...values: any[]): string {
    return "foo";
}

dedent``;
dedent`${"foo"}`;
dedent`${1}`;
dedent`${[]}`;
~~~~~~ [err % ('dedent')]

// TODO: those should be an error
let {f, g, h} = p;
(function ({f, g}: I) {})

[err]: %s is deprecated.
[errmsg]: %s is deprecated: %s