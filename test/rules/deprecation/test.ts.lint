import {other, other2 as foobar} from './other';
        ~~~~~          [errmsg % ('other', 'reason')]
               ~~~~~~  [err % ('other2')]
other();
~~~~~ [errmsg % ('other', 'reason')]
foobar();
~~~~~~ [err % ('foobar')]

declare interface D {
    /** @deprecated */ m: () => void;
}

declare let d: D;
d.m();
  ~ [err % ('m')]

/**
 * Some text
 * @one-tag
 * @deprecated reason is this
 * @two-tag
 */
export class P {
    /** @deprecated */ f: string;
    g,
    /** @deprecated Use g instead.*/ h: number;
}

let p = new P();
            ~ [errmsg % ('P', 'reason is this')]
let pf = p.f;
           ~ [err % ('f')]
pf; // that indirection is allowed
p.g;
p.h;
  ~ [errmsg % ('h', 'Use g instead.')]

interface I extends P {}
                    ~ [errmsg % ('P', 'reason is this')]
declare var i: I;
i.f;
  ~ [err % ('f')]
i.g;

/** @deprecated */
const A = 1, B = 2;

A + B;
~     [err % ('A')]
    ~ [err % ('B')]

declarationIsMissing();

// TODO: those should be an error
let {f, g, h} = p;
(function ({f, g}: I) {})

[err]: %s is deprecated.
[errmsg]: %s is deprecated: %s