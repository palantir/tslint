class Promise<T> {
    then(): Promise<T>;
}
function valueWrong(): number | undefined {
    return;
    ~~~~~~~ [UNDEFINED]
}
function valueRight(): number | undefined {
    return undefined;
}

function voidWrong(): void {
    return undefined;
    ~~~~~~~~~~~~~~~~~ [VOID]
}
function voidRight(): void {
    return;
}

// Infers type from context.
[].forEach(() => {
    return undefined;
    ~~~~~~~~~~~~~~~~~ [VOID]
});
[].map<number | undefined>(() => {
    return;
    ~~~~~~~ [UNDEFINED]
});

type Cb = () => void;
declare function badContextualType(cb: Cb | Cb[]): void;
// Uses typeAtLocation instead of contextual type.
badContextualType(() => {
    if (1 === 2) return 1;
    else return;
         ~~~~~~~ [UNDEFINED]
});

// Allow anything in callback taking 'any'.
function takesAnyCb(cb: () => any): void;
takesAnyCb(() => { return; });
takesAnyCb(() => { return undefined; });
takesAnyCb(() => {
    if (1 === 2) return;
    else return 1;
});
takesAnyCb(() => {
    if (1 === 2) return;
    else return undefined;
});
takesAnyCb((): void => {
    if (1 === 2) return;
    else return undefined;
         ~~~~~~~~~~~~~~~~~ [VOID]
});

async function promiseVoid(): Promise<void> {
    if (1 === 2) return;
    else return undefined;
         ~~~~~~~~~~~~~~~~~ [VOID]
}

async function promiseValue(): Promise<number | undefined> {
    if (1 === 2) return 1;
    else return;
         ~~~~~~~ [UNDEFINED]
}

declare function f<T>(action: () => T | undefined): void;
f(() => { return undefined; });
          ~~~~~~~~~~~~~~~~~ [VOID]

declare function test(cb: () => Promise<void> | void): void;

test(async () => {
    if (1 === 2) return;
    else return undefined;
         ~~~~~~~~~~~~~~~~~ [VOID]
});


function * generator(returnNothing: boolean) {
    if (returnNothing) return;
    yield 1;
    return yield * [2, 3];
}

class ClassWithGeneratorMethod {
    * generatorMethod(returnNothing: boolean) {
        if (returnNothing) return;
        yield 1;
    }
}

[VOID]: `void` function should use `return;`, not `return undefined;`.
[UNDEFINED]: Value-returning function should use `return undefined;`, not just `return;`.
