class C { }
enum MyEnum {
	A, B, C
}
let anyType: {};
let boolType: boolean;
let bwrapType: Boolean;
let numType = 9;
let strType = "string";
let objType = new Object();
let classType = new C();
let enumType = MyEnum.A;
let boolFn = () => { return true; };
let strFn = () => { return strType; };
let numFn = () => { return numType; };
let boolExpr = (strType !== undefined);

/*** Binary Expressions ***/
/*** Invalid Boolean Expressions ***/
boolType && objType && enumType;
                       ~~~~~~~~  [Operands for the && or || operator should not be of Enum type]
objType || boolType || enumType;
                       ~~~~~~~~  [Operands for the && or || operator should not be of Enum type]

/*** Valid Boolean Expressions ***/
classType && boolType;
anyType && boolType;
numType && boolType;
boolType && strType;
bwrapType && boolType;

boolType || classType;
boolType || anyType;
boolType || numType;
strType || boolType;
bwrapType || boolType;
boolExpr && strType;
numType || boolExpr;
numType && boolExpr || strType;
bwrapType || boolExpr && bwrapType;
boolType && boolType;
boolExpr || boolType;
(numType > 0) && boolFn();
(strType !== "bool") && boolExpr;
(numType > 0) && (strType !== "bool");
(strType !== undefined) || (numType < 0);

/*** ConditionalExpression ***/
/*** Invalid ***/
enumType ? 0 : 1;
~~~~~~~~          [Condition cannot be an Enum expression]

/*** Valid ***/
strType ? strType : numType;
numType ? numType : numFn();
objType ? objType : boolExpr;
classType ? strType : undefined;
bwrapType ? 1 : 0;
boolFn() ? numType : strType;
boolType ? strType : undefined;

/*** PrefixUnary Expressions ***/
/*** Invalid ***/
!enumType;
~~~~~~~~~  [Operand for the ! operator should not be of Enum type]

/*** Valid ***/
!!numType;
!strType;
!objType;
!!classType;
!bwrapType;
!!undefined;
!!boolFn();
!boolExpr;
!!boolType;

/*** If Statement ***/
/*** Invalid ***/
if (MyEnum.A) { /* statements */ }
    ~~~~~~~~                       [If statement condition cannot be an Enum expression]

/*** Valid ***/
if (numType) { /* statements */ }
if (objType) { /* statements */ }
if (strType) { /* statements */ }
if (bwrapType) { /* statements */ }
if (strFn()) { /* statements */ }
if (classType) { /* statements */ }
if (boolFn()) { /* statements */ }
if (boolExpr) { /* statements */ }
if (boolType) { /* statements */ }

/*** While Statement ***/
/*** Invalid ***/
while (MyEnum.A) { /* statements */ }
       ~~~~~~~~                       [While statement condition cannot be an Enum expression]

/*** Valid ***/
while (numType) { /* statements */ }
while (objType) { /* statements */ }
while (strType) { /* statements */ }
while (strFn()) { /* statements */ }
while (bwrapType) { /* statements */ }
while (classType) { /* statements */ }
while (boolFn()) { /* statements */ }
while (boolExpr) { /* statements */ }
while (boolType) { /* statements */ }

/*** Do Statement ***/
/*** Invalid ***/
do { /* statements */ } while (MyEnum.A);
                               ~~~~~~~~  [Do-While statement condition cannot be an Enum expression]

/*** Valid ***/
do { /* statements */ } while (numType);
do { /* statements */ } while (objType);
do { /* statements */ } while (strType);
do { /* statements */ } while (bwrapType);
do { /* statements */ } while (strFn());
do { /* statements */ } while (classType);
do { /* statements */ } while (boolFn());
do { /* statements */ } while (boolExpr);
do { /* statements */ } while (boolType);

/*** For Statement ***/
/*** Valid ***/
for (let j = 0; j; j++) { /* statements */ }
for (let j = 0; j > numType; j++) { /* statements */ }
