let x: Array<undefined> = [undefined] as undefined[];
       ~~~~~~~~~~~~~~~~                               [0]
let y: string[] = <Array<string>>["2"];
                   ~~~~~~~~~~~~~        [0]
let z: Array = [3, "4"];
       ~~~~~             [0]

let xx: Array<Array<number>> = [[1, 2], [3]];
        ~~~~~~~~~~~~~~~~~~~~                  [0]
              ~~~~~~~~~~~~~                   [0]
let yy: number[][] = [[4, 5], [6]];

let ya = [[1, "2"]] as[number, string][];

type Arr<T> = Array<T>;
              ~~~~~~~~  [0]

// Ignore user defined aliases
let yyyy: Arr<Array<Arr<string>>[]> = [[[["2"]]]];
              ~~~~~~~~~~~~~~~~~~                   [0]

interface ArrayClass<T> {
    foo: Array<T>;
         ~~~~~~~~  [0]
    bar: T[];
    baz: Arr<T>;
}

function fooFunction(foo: Array<ArrayClass<string>>) {
                          ~~~~~~~~~~~~~~~~~~~~~~~~~    [0]
    return foo.map(e => e.foo);
}

function barFunction(bar: ArrayClass<String>[]) {
    return bar.map(e => e.bar);
}

function bazFunction(baz: Arr<ArrayClass<String>>) {
    return baz.map(e => e.baz);
}

let fooVar: Array<(c: number) => number>;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [0]
let barVar: ((c: number) => number)[];

type fooUnion = Array<string|number|boolean>;
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [0]
type barUnion = (string|number|boolean)[];

type fooIntersection = Array<string & number>;
                       ~~~~~~~~~~~~~~~~~~~~~~  [0]
type barIntersection = (string & number)[];

interface FooInterface {
    '.bar': {baz: string[];};
}

[0]: Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
