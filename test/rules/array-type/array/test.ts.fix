let x: undefined[] = [undefined] as undefined[];
let y: string[] = <string[]>["2"];
let z: any[] = [3, "4"];
let u: unknown[] = [];

let xx: number[][] = [[1, 2], [3]];
let yy: number[][] = [[4, 5], [6]];

let ya = [[1, "2"]] as[number, string][];

type Arr<T> = T[];

// Ignore user defined aliases
let yyyy: Arr<Arr<string>[][]> = [[[["2"]]]];

interface ArrayClass<T> {
    foo: T[];
    bar: T[];
    baz: Arr<T>;
}

function fooFunction(foo: ArrayClass<string>[]) {
    return foo.map(e => e.foo);
}

function barFunction(bar: ArrayClass<String>[]) {
    return bar.map(e => e.bar);
}

function bazFunction(baz: Arr<ArrayClass<String>>) {
    return baz.map(e => e.baz);
}

let fooVar: ((c: number) => number)[];
let barVar: ((c: number) => number)[];

type fooUnion = (string|number|boolean)[];
type barUnion = (string|number|boolean)[];

type fooIntersection = (string & number)[];
type barIntersection = (string & number)[];

interface FooInterface {
    '.bar': {baz: string[];};
}

// Test an unknown Array
let t: unknown[] = [];
let u: unknown[] = [];

