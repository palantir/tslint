class EmptyClassA {}

class EmptyClassB { constructor() {} }

export class AClass {
       ~~~~~ [0]
    public static helper(): void {}
    private static privateHelper(): boolean {
        return true;
    }
    constructor() {}
}

export class BClass {
       ~~~~~ [0]
    public static helper(): void {}
    private static privateHelper(): boolean {
        return true;
    }
}

export class CClass extends BaseClass {
    public static helper(): void {}
    private static privateHelper(): boolean {
        return true;
    }
    constructor() {}
}

export class ShorthandPropsClass {
    public static helper(): void {}
    constructor(private a: string) {}
}

export class DClass {
    public static helper(): void {}
    private static privateHelper(): boolean {
        return true;
    }
    public index = 0;
    constructor() {}
}

export class EClass {
    public static helper(): void {}
    private Helper(): boolean {
        return true;
    }
    constructor() { this.that = what; }
}

[0]: Classes containing only static members are disallowed.
 