class Foo {
    public prop = 1;
    constructor() {
        class Bar {
        ~~~~~ [0]
            static PROP = 2;
        }
    }
}

class Foo {
    constructor() {
        class Bar {
        ~~~~~ [0]
            static PROP = 2;
        }
    }
}

class Foo {
    constructor() {
        class Bar {
            constructor() {
                class FizzBuzz {
                ~~~~~ [0]
                    public static a = 'hello mom!';
                }
            }
        }
    }
}

class Foo {
    constructor() {
        class Bar {
            public static helper(): void {}
            private private Helper(): boolean {
                return true;
            }
            constructor() {}
        }
    }
}

class Foo {
    constructor() {
        class Bar {
            constructor() {
                class FizzBuzz {
                    public static helper(): void {}
                    private privateHelper(): boolean {
                        return true;
                    }
                    constructor() {}
                }
            }
        }
    }
}

class Foo {
    constructor() {
        class Bar {
            private a: SomeType;
            static PROP = 2;
        }
    }
}

class Foo {
    constructor() {
        class Bar {
        ~~~~~ [0]
            static PROP = 2;
        }
    }
}

class EmptyClassA {}

class EmptyClassB { constructor() {} }

export class AClass {
       ~~~~~ [0]
    public static helper(): void {}
    private static privateHelper(): boolean {
        return true;
    }
    constructor() {}
}

export class BClass {
       ~~~~~ [0]
    public static helper(): void {}
    private static privateHelper(): boolean {
        return true;
    }
}

export class CClass extends BaseClass {
    public static helper(): void {}
    private static privateHelper(): boolean {
        return true;
    }
    constructor() {}
}

export class ShorthandPropsClass {
    public static helper(): void {}
    constructor(private a: string) {}
}

export class DClass {
    public static helper(): void {}
    private static privateHelper(): boolean {
        return true;
    }
    public index = 0;
    constructor() {}
}

export class EClass {
    public static helper(): void {}
    private Helper(): boolean {
        return true;
    }
    constructor() {}
}

[0]: Classes containing only static members are disallowed.
 