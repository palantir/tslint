// valid case
var a = ([x, y]) => {};
var aa = ({x, y}) => {};
var b = (a: number) => {};
var c = (a, b) => {};
var f = (...rest) => {};
var f = a: number => {}; // TSLint don't warn. But syntax is wrong.
var bar = <T>(method: () => T) => {
    method();
};
var barbar = <T>(method: (a: any) => T) => {
    method("");
};
var barbarbar = <T>(method: (a) => T) => {
    method("");
};
var piyo = <T, U>(method: () => T) => {
    method();
};
const validAsync = async (param: any) => {};

var e = (a => {})(1);
var f = ab => {};

arr.map(a => b);

// invalid case
var a = (a) => {};
         ~         [0]
const invalidAsync = async (param) => {};
                            ~~~~~ [0]
const invalidAsync = async(param) => {};
                           ~~~~~ [0]

// parens required when return type annotation is present
const fn = (param): void => {};

let foo = (bar,) => bar;
           ~~~ [0]

let foo = (
    bar
    ~~~ [0]
) => bar;

let foo = (
    bar,
    ~~~ [0]
) => bar;

let foo = async (
    bar,
    ~~~ [0]
) => bar;

arr.map((a) => b);
         ~ [0]

foo(async (a) => b);
           ~ [0]

function *gen() { yield (a) => b; }
                         ~ [0]

export default (a) => b;
                ~ [0]

throw (a) => b;
       ~ [0]
[0]: Parentheses are prohibited around the parameter in this single parameter arrow function
