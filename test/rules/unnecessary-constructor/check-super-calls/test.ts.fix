export class ExportedClass {
}

class PublicConstructor {
}

class ProtectedConstructor {
    protected constructor() { }
}

class PrivateConstructor {
    private constructor() { }
}

class SameLine { }

class WithPrecedingMember {
    public member: string;
}

class WithFollowingMethod {
    public method() {}
}

const classExpression = class {
}

class ContainsContents {
    constructor() {
        console.log("Hello!");
    }
}

class CallsSuper extends PublicConstructor {
}

class ContainsParameter {
}

class PrivateContainsParameter {
    private constructor(x: number) { }
}

class ProtectedContainsParameter {
    protected constructor(x: number) { }
}

class ContainsParameterDeclaration {
    constructor(public x: number) { }
}

class ContainsParameterAndParameterDeclaration {
    constructor(x: number, public y: number) { }
}

class ConstructorOverload {
}

interface IConstructorSignature {
    new(): {};
}

class DecoratedParameters {
    constructor(@Optional x: number) {}
}

class X {
    constructor(private param1: number, param2: number) {}
}

export class Y extends X {
    constructor(param1: number) {
        super(param1, 2);
    }
}

class Base {
    constructor(public param: number) {}
}

class Super extends Base {
    public param: number;
    constructor(param1: number) {
        super(param1);
        this.param = param1;
    }
}

class Super extends Base {
}

class Super extends Base {
    constructor(param1: number, public param2: number) {
        super(param1);
    }
}

class Super extends Base {
}

class Super extends Base {
    constructor(param1: number) {
        super(param1 + 1);
    }
}

class Super extends Base {
    constructor() {
        super(1);
    }
}

class Super extends Base {
    constructor(param1: number) {
        super(1);
    }
}

const test = (param: number) => number;

class Super extends Base {
    constructor(param1: number) {
        super(test(param1));
    }
}

class Base2 {
    constructor(public param1: number, param2: number) {}
}

class Super extends Base2 {
    constructor(param1: number, param2: number) {
        super(test(param2), param1);
    }
}

class Super extends Base2 {
}

class Super extends Base {
    public param1: number;
    constructor(public param2: number) {
        super(param2);
        this.param1 = param2;
    }
}

