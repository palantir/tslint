[typescript]: >= 2.4.0 < 3.5.0

// Catches explicit union types.

type SomeType =

    | null
      ~~~~
    | undefined
~~~~~~~~~~~~~~~
    | boolean;
~~~~~~~~~~~~~ [0]

const c: string | null | undefined;
         ~~~~~~~~~~~~~~~~~~~~~~~~~ [0]

const someFunc = (): string | undefined | null => {}
                     ~~~~~~~~~~~~~~~~~~~~~~~~~ [0]

const someFunc = (foo: null | string | undefined, bar: boolean) => {}
                       ~~~~~~~~~~~~~~~~~~~~~~~~~ [0]

interface SomeInterface {
    foo: number | null | undefined;
         ~~~~~~~~~~~~~~~~~~~~~~~~~ [0]
    bar: boolean;
}

function someFunc(): Promise<number | undefined | null> {} // error
                             ~~~~~~~~~~~~~~~~~~~~~~~~~ [0]

function someFunc(bar: boolean, foo: undefined | number | null) {}
                                     ~~~~~~~~~~~~~~~~~~~~~~~~~ [0]

// Catches implicit return types.

function testFunc() {
~~~~~~~~~~~~~~~~~~~~~
    const somePredicate = (): boolean => true;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    const someFunc = (): string | null => null;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    let foo;
~~~~~~~~~~~~
    if (somePredicate()) {
~~~~~~~~~~~~~~~~~~~~~~~~~~
        foo = someFunc();
~~~~~~~~~~~~~~~~~~~~~~~~~
    }
~~~~~
    return foo;
~~~~~~~~~~~~~~~
}
~ [0]

// Does not consider ? as shorthand for undefined.

type Text = string | null

interface TextInterface {
    foo?: Text
}

interface SuperTextInterface {
    bar?: Text | number
}

function someFunc(foo?: Text, bar?: Text | number) {}

// Ignores implicit union types.

const x: SomeType;

const someFunc = (): SomeType => {}

function(foo: SomeInterface) {}

const y = testFunc();

// Unless they are explicitly unioned.

const z: Text | undefined;
         ~~~~~~~~~~~~~~~~ [0]

[0]: Union type cannot include both 'null' and 'undefined'.
