// errors, inferrable type is declared
let a: number = 7;
       ~~~~~~           [number]
let b: boolean = false;
       ~~~~~~~          [boolean]
let c: string = "foo";
       ~~~~~~           [string]
let d: number = Infinity;
       ~~~~~~           [number]
let e: number = -Infinity;
       ~~~~~~           [number]
class C {
    x: number = 1;
       ~~~~~~           [number]
}

// errors, types are inferrable
function foo (a: number = 5, b: boolean = true, c: string = "bah") { }
                 ~~~~~~                                                [number]
                                ~~~~~~~                                [boolean]
                                                   ~~~~~~              [string]

class Foo {
    bar: number = 0;
         ~~~~~~          [number]
    baz: boolean = true,
         ~~~~~~~         [boolean]
    bas: string = "moar";
         ~~~~~~          [string]
    readonly foo: boolean = false;
    constructor(readonly foobar: string = "test", public barfoo: number = 1) {}
                                                                 ~~~~~~ [number]
}

// not errors, inferrable type is not declared
let _x = 7;
let _y = false;
let _z = "foo";

// not error, type is not inferrable
let weird: any = 123;

// not errors, inferrable type is not declared
function bar(a = 5, b = true, c = "bah") { }

// not errors, types are not inferrable
function baz(a: any = 5, b: any = true, c: any = "bah") { }

[number]: Type number trivially inferred from a number literal, remove type annotation
[boolean]: Type boolean trivially inferred from a boolean literal, remove type annotation
[string]: Type string trivially inferred from a string literal, remove type annotation
