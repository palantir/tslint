function foo(x) {
    console.log(this.x);
                ~~~~                      [the "this" keyword is disallowed outside of a class body]

    this.evilMethod();
    ~~~~                                  [the "this" keyword is disallowed outside of a class body]
}

class AClass {
    x;

    constructor() {
        this.x = 2;
    }

    aMethod() {
        this.x = 5;
    }

    bMethod() {
        [3,4].forEach(function(nr){
            console.log(this.x === nr);
                        ~~~~              [the "this" keyword is disallowed in function bodies inside class methods, use arrow functions instead]
        });
    }

    Method() {
        [3,4].forEach((nr) => {
            console.log(this.x === nr);
        });
    }

    cMethod = () => {
        [3,4].forEach(function(nr){
            console.log(this.x === nr);
                        ~~~~               [the "this" keyword is disallowed in function bodies inside class methods, use arrow functions instead]
        });
    }

    dMethod() {
        [3,4].forEach(badFunction);
        function badFunction(nr) {
            console.log(this.x === nr);
                        ~~~~               [the "this" keyword is disallowed in function bodies inside class methods, use arrow functions instead]
        }
    }

    eMethod() {
        [3,4].forEach(badFunction);
        let badFunction = nr => console.log(this.x === nr);
    }
}

const AClassExpression = class {
    x;

    aMethod() {
        this.x = 5;
    }
}
