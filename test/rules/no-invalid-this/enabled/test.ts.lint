function foo(x: number) {
    console.log(this.x);
                ~~~~[the "this" keyword is disallowed outside of a class body]

    this.evilMethod();
    ~~~~[the "this" keyword is disallowed outside of a class body]
}

class AClass {
    private x: number;

    constructor() {
        this.x = 2;
    }

    public aMethod() {
        this.x = 5;
    }

    public bMethod() {
        [3,4].forEach(function(nr){
            console.log(this.x === nr);
                        ~~~~[the "this" keyword is disallowed in function bodys inside class methods]
        });
    }

    public bMethod() {
        [3,4].forEach((nr) => {
            console.log(this.x === nr);
        });
    }

    public cMethod = () => {
        [3,4].forEach(function(nr){
            console.log(this.x === nr);
                        ~~~~[the "this" keyword is disallowed in function bodys inside class methods]
        });
    }

    public dMethod() {
        [3,4].forEach(badFunction);
        function badFunction(nr) {
            console.log(this.x === nr);
                        ~~~~[the "this" keyword is disallowed in function bodys inside class methods]
        }
    }

    public eMethod() {
        [3,4].forEach(badFunction);
        let badFunction = nr => console.log(this.x === nr);
    }
}

const AClassExpression = class {
    private x: number;

    public aMethod() {
        this.x = 5;
    }
}
