class SampleClass {
    private static readonly correctlyReadonlyStatic = 7;

    private static incorrectlyModifiableStatic = 7;
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private static variable 'incorrectlyModifiableStatic' is never reassigned; mark it as 'readonly'.]

    private static incorrectlyModifiableStaticArrow = () => {};
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private static variable 'incorrectlyModifiableStaticArrow' is never reassigned; mark it as 'readonly'.]

    private static correctlyModifiableStatic = 7;

    private static correctlyModifiableByParameterProperty = 7;

    private readonly correctlyReadonlyInline = 7;

    private readonly correctlyReadonlyDelayed;

    private incorrectlyModifiableInline = 7;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private member variable 'incorrectlyModifiableInline' is never reassigned; mark it as 'readonly'.]

    private incorrectlyModifiableDelayed;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private member variable 'incorrectlyModifiableDelayed' is never reassigned; mark it as 'readonly'.]

    private correctlyModifiableInline = 7;

    private correctlyModifiableDelayed;

    private correctlyModifiableDeleted = 7;

    private childClassExpressionModifiable = 7;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private member variable 'childClassExpressionModifiable' is never reassigned; mark it as 'readonly'.]

    private correctlyModifiableWithinConstructor;

    private correctlyModifiableWithinConstructorInArrowFunction;

    private correctlyModifiableWithinConstructorInFunctionExpression;

    private correctlyModifiableWithinConstructorInGetAccessor;

    private correctlyModifiableWithinConstructorInMethodDeclaration;

    private correctlyModifiableWithinConstructorInSetAccessor;

    private correctlyModifiablePostDecremented;

    private correctlyModifiablePostIncremented;

    private correctlyModifiablePreDecremented;

    private correctlyModifiablePreIncremented;

    private overlappingClassVariable = 7;
            ~~~~~~~~~~~~~~~~~~~~~~~~ [Private member variable 'overlappingClassVariable' is never reassigned; mark it as 'readonly'.]

    protected protectedModifiable = 7;

    protected publicModifiable = 7;

    public constructor(
        private readonly correctlyReadonlyParameter: number = 7,
        private incorrectlyModifiableParameter: number = 7,
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private member variable 'incorrectlyModifiableParameter' is never reassigned; mark it as 'readonly'.]
        private correctlyModifiableParameter: number = 7,
        public correctlyModifiablePublicParameter: number = (() => {
            return SampleClass.correctlyModifiableByParameterProperty = 7;
        })();
    ) {
        this.correctlyReadonlyDelayed = 7;
        this.incorrectlyModifiableDelayed = 7;
        this.incorrectlyModifiableParameter = 7;

        (() => {
            const self = this;

            this.correctlyModifiableWithinConstructor = 7;

            (() => {
                this.correctlyModifiableWithinConstructorInArrowFunction = 7;
            })();

            (function () {
                self.correctlyModifiableWithinConstructorInFunctionExpression = 7;
            })();

            const confusingObject = {
                get getAccessor() {
                    return self.correctlyModifiableWithinConstructorInGetAccessor = 7;
                }

                methodDeclaration() {
                    self.correctlyModifiableWithinConstructorInMethodDeclaration = 7;
                }

                set setAccessor() {
                    self.correctlyModifiableWithinConstructorInSetAccessor = 7;
                }
            };
        })();

        SampleClass.correctlyModifiableStatic += 1;
    }

    public mutate() {
        this.correctlyModifiableDelayed = 7;
        this.correctlyModifiableInline = 7;
        this.correctlyModifiableMember = () => {};
        this.correctlyModifiableParameter = 7;

        delete this.correctlyModifiableDeleted;

        this.correctlyModifiablePostDecremented--;
        this.correctlyModifiablePostIncremented++;
        --this.correctlyModifiablePreDecremented;
        ++this.correctlyModifiablePreIncremented;
    }

    public createConfusingChildClass() {
        return class {
            private correctlyModifiableInline = 7;

            private incorrectlyModifiableInline = 7;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private member variable 'incorrectlyModifiableInline' is never reassigned; mark it as 'readonly'.]

            private incorrectlyUniqueModifiableInline = 7;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private member variable 'incorrectlyUniqueModifiableInline' is never reassigned; mark it as 'readonly'.]

            private childClassExpressionModifiable = 7;

            mutate() {
                this.correctlyModifiableInline = 7;
                this.childClassExpressionModifiable = 7;
            }
        }
    }

    public workWithSimilarClass(other: SimilarClass) {
        other.overlappingClassVariable = 7;
    }

    private incorrectlyModifiableMember = () => { };
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Private member variable 'incorrectlyModifiableMember' is never reassigned; mark it as 'readonly'.]

    private correctlyModifiableMember = () => { };
}

class SimilarClass {
    public overlappingClassVariable = 7;
}

declare class DeclaredClass {
    private declaredMember = 7;
}
