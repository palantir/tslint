class SampleClass {
    private static readonly correctlyReadonlyStatic = 7;

    private static readonly incorrectlyModifiableStatic = 7;

    private static readonly incorrectlyModifiableStaticArrow = () => {};

    private static correctlyModifiableStatic = 7;

    private readonly correctlyReadonlyInline = 7;

    private readonly correctlyReadonlyDelayed;

    private readonly incorrectlyModifiableInline = 7;

    private readonly incorrectlyModifiableDelayed;

    private correctlyModifiableInline = 7;

    private correctlyModifiableDelayed;

    private correctlyModifiableDeleted = 7;

    private readonly childClassExpressionModifiable = 7;

    private correctlyModifiableWithinConstructor;

    private correctlyModifiablePostDecremented;

    private correctlyModifiablePostIncremented;

    private correctlyModifiablePreDecremented;

    private correctlyModifiablePreIncremented;

    private readonly overlappingClassVariable = 7;

    protected protectedModifiable = 7;

    protected publicModifiable = 7;

    public constructor(
        private readonly correctlyReadonlyParameter: number = 7,
        private readonly incorrectlyModifiableParameter: number = 7,
        private correctlyModifiableParameter: number = 7
    ) {
        this.correctlyReadonlyDelayed = 7;
        this.incorrectlyModifiableDelayed = 7;
        this.incorrectlyModifiableParameter = 7;

        (() => {
            this.correctlyModifiableWithinConstructor = 7;
        })();

        SampleClass.correctlyModifiableStatic += 1;
    }

    public mutate() {
        this.correctlyModifiableDelayed = 7;
        this.correctlyModifiableInline = 7;
        this.correctlyModifiableMember = () => {};
        this.correctlyModifiableParameter = 7;

        delete this.correctlyModifiableDeleted;

        this.correctlyModifiablePostDecremented--;
        this.correctlyModifiablePostIncremented++;
        --this.correctlyModifiablePreDecremented;
        ++this.correctlyModifiablePreIncremented;
    }

    public createConfusingChildClass() {
        return class {
            private correctlyModifiableInline = 7;

            private readonly incorrectlyModifiableInline = 7;

            private readonly incorrectlyUniqueModifiableInline = 7;

            private childClassExpressionModifiable = 7;

            mutate() {
                this.correctlyModifiableInline = 7;
                this.childClassExpressionModifiable = 7;
            }
        }
    }

    public workWithSimilarClass(other: SimilarClass) {
        other.overlappingClassVariable = 7;
    }

    private readonly incorrectlyModifiableMember = () => { };

    private correctlyModifiableMember = () => { };
}

class SimilarClass {
    public overlappingClassVariable = 7;
}
