const asyncFn = {
  async f() {
        ~ [SHORTHAND_ASSIGNMENT]
    await some_promise;
  },
  async* fa() {
         ~~ [SHORTHAND_ASSIGNMENT]
    await some_promise;
  }
};

const bad = {
  w() {
  ~ [SHORTHAND_ASSIGNMENT]
    const alsoBad = {
        bad,
        ~~~ [SHORTHAND_ASSIGNMENT]
    };
  },
  *x() {},
   ~ [SHORTHAND_ASSIGNMENT]
  [y]() {},
  ~~~ [SHORTHAND_ASSIGNMENT]
  z,
  ~ [SHORTHAND_ASSIGNMENT]
  nest: {
    nestBad() {},
    ~~~~~~~ [SHORTHAND_ASSIGNMENT]
    nextGood: function(prop: string): void {}
  }
};

const good = {
  w: function() {},
  x: function *() {},
  [y]: function() {}
};

const arrows = {
  x: (y) => y  // this is OK.
};

const namedFunctions = {
  x: function y() {}  // named function expressions are also OK.
};

const quotes = {
  "foo-bar": function() {},
  "foo-bar"() {}
  ~~~~~~~~~ [SHORTHAND_ASSIGNMENT]
};

const extraCases = {
  x,
  ~ [SHORTHAND_ASSIGNMENT]
  a: 123,
  b: "hello",
  c: 'c',
  ["a" + "nested"]: {
    x: x
  }
};

export class ClassA extends ClassZ {
  testMethod() {}
}

({foo} = {foo});
  ~~~ [SHORTHAND_ASSIGNMENT]
          ~~~ [SHORTHAND_ASSIGNMENT]

[SHORTHAND_ASSIGNMENT]: Shorthand property and method assignments have been disallowed.
