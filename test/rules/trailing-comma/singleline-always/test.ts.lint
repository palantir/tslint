var v = [{
    a: 1,
    b: 2,
    d: 34,
    c: (a + b),
},];

var x = [{
    a: 1,
    b: 2,
    d: 34,
    c: (a + b)
}];
~   [Missing trailing comma]

var s = {
    sA: 6,
};

var t = {
    tA: 7
}

var y = {
    yA: 42,
    yB: 24,
};

var z = {
    zOne: 2,
    zTwo: 1
};

var ss = [
    6,
];

var tt = [
    7
];

var yy = [
    42,
    24,
];

var zz = [
    2,
    1
];

var a = [{a: 1, b: 2, d: 34, c: (a + b),},];

var b = [{a: 1, b: 2, d: 34, c: (a + b)}];
                                      ~    [Missing trailing comma]
                                       ~   [Missing trailing comma]

var c = {cA: 42, cB: 24,};

var d = {dOne: 2, dTwo: 1};
                        ~   [Missing trailing comma]

var cc = [42, 24,];

var dd = [2, 1];
             ~   [Missing trailing comma]

var {
    sA,
} = s;

var {
    tA
} = t;

var {
    yA,
    yB,
} = y;

var {
    zOne,
    zTwo
} = z;

var [
    ssA,
] = ss;

var [
    ttA
] = tt;

var [
    yyA,
    yyB,
] = yy;

var [
    zzOne,
    zzTwo
] = zz;

var {cA, cB,} = c;

var {dOne, dTwo} = d;
              ~       [Missing trailing comma]

var [ccA, ccB,] = cc;

var [ddOne, ddTwo] = dd;
                ~        [Missing trailing comma]

var a: [string, number] = null;
                     ~          [Missing trailing comma]

var a: [string, number,] = null;

var a: [
    string,
    number
] = null;

var a: [
    string,
    number,
] = null;

import {
    ClassS,
} from "module";

import {
    ClassT
} from "module";

import {
    ClassV,
    ClassX,
} from "module";

import {
    ClassY,
    ClassZ
} from "module";

import {ClassA, ClassB,} from "module";

import {ClassC, ClassD} from "module";
                     ~                 [Missing trailing comma]

function foo(bar: string, baz: string);
                                    ~   [Missing trailing comma]

function foo(bar: string, baz: string,);

function foo(
    bar: string,
    baz: string
);

function foo(
    bar: string,
    baz: string,
);

var foo = function(bar: string, baz: string) { return 42; };
                                          ~                  [Missing trailing comma]

var foo = function(bar: string, baz: string,) { return 42; };

var foo = function(
    bar: string,
    baz: string
) {
    return 42;
};

var foo = function(
    bar: string,
    baz: string,
) {
    return 42;
};

function foo(bar: string, baz: string) { return 42; }
                                    ~                 [Missing trailing comma]

function foo(bar: string, baz: string,) { return 42; }

function foo(
    bar: string,
    baz: string
) {
    return 42;
}

function foo(
    bar: string,
    baz: string,
) {
    return 42;
}

function foo(bar: string, baz: string,
    ack: string
) {
    return 42;
}

function foo(bar: string, baz: string,
    ack: string,
) {
    return 42;
}

var foo = (bar: string, baz: string) => 42;
                                  ~         [Missing trailing comma]

var foo = (bar: string, baz: string,) => 42;

var foo = (
    bar: string,
    baz: string
) => 42;

var foo = (
    bar: string,
    baz: string,
) => 42;

var foo: (bar: string, baz: string) => number = null;
                                 ~                    [Missing trailing comma]

var foo: (bar: string, baz: string,) => number = null;

var foo: (
    bar: string,
    baz: string
) => number = null;

var foo: (
    bar: string,
    baz: string,
) => number = null;

var foo: (bar: string, baz: string) => number;
                                 ~             [Missing trailing comma]

var foo: (bar: string, baz: string,) => number;

var foo: (
    bar: string,
    baz: string
) => number;

var foo: (
    bar: string,
    baz: string,
) => number;

var foo: new (bar: string, baz: string) => Test;
                                     ~           [Missing trailing comma]

var foo: new (bar: string, baz: string,) => Test;

var foo: new (
    bar: string,
    baz: string
) => Test;

var foo: new (
    bar: string,
    baz: string,
) => Test;

var x = foo(42, 43);
                 ~   [Missing trailing comma]

var x = foo(42, 43,);

var x = foo(
    42,
    43
);

var x = foo(
    42,
    43,
);

var x = new Test("foo");
                     ~   [Missing trailing comma]

var x = new Test("foo",);

var x = new Test(
    "foo"
);

var x = new Test(
    "foo",
);

var x: { foo: string; bar: string };

var x: { foo: string; bar: string; };

var x: {
    foo: string;
    bar: string
};

var x: {
    foo: string;
    bar: string;
};

var x: { foo: string, bar: string };
                                ~    [Missing trailing comma]

var x: { foo: string, bar: string, };

var x: {
    foo: string,
    bar: string
};

var x: {
    foo: string,
    bar: string,
};

class Test<A, B, C> {
                 ~    [Missing trailing comma]

    constructor(bar: string) { }
                          ~      [Missing trailing comma]

    constructor(bar: string, baz: string,) { }

    constructor(
        bar: string,
        baz: string,
        ack: string
    ) { }

    constructor(
        bar: string,
        baz: string,
        ack: string,
        foo: string,
    ) { }

    public foo(bar: string, baz: string) {
                                      ~    [Missing trailing comma]
        return 42;
    }

    private foo2(bar: string, baz: string,) {
        return 42;
    }

    public static foo3(
        bar: string,
        baz: string
    ) {
        return 42;
    }

    private static foo4(
        bar: string,
        baz: string,
    ) {
        return 42;
    }

    foo5<
        T extends Test<[A, A], [A, A,], A>,
                           ~                [Missing trailing comma]
                                        ~   [Missing trailing comma]
        U extends Test<B, B, B,>,
        V extends Test<
            [
                C,
                C
            ],
            [
                C,
                C,
            ]
            C
        >
    >(
        bar: A,
        baz: T,
    ) {
        return 42;
    }

    foo6<
        T extends { foo: A; bar: B; },
        U extends { foo: A; bar: B; },
        V extends {
            foo: A;
            bar: B;
        },
        W extends {
            foo: [
                string,
                string,
            ];
        },
    >() { return 42; }

    set bar(foo: string) { }
                      ~      [Missing trailing comma]

    set bar2(foo: string,) { }

    set bar3(
        foo: string
    ) { }

    set bar4(
        foo: string,
    ) { }
}

class Test2<A, B, C,> { }

class Test3<
    A,
    B,
    C
> { }

class Test4<
    A,
    B,
    C,
> { }

interface ITest<A ,B, C> {
                      ~    [Missing trailing comma]

    new <U, V>(bar: U): ITest<U, U, V>;
            ~                           [Missing trailing comma]
                    ~                   [Missing trailing comma]
                                    ~   [Missing trailing comma]

    new <
        U,
        V
    >(
        bar: U,
        baz: U,
        ack: V
    ): ITest<
        U,
        U,
        V
    >;

    new <
        U,
        V,
    >(
        bar: U,
        baz: U,
        ack: V,
        foo: V,
    ): ITest<
        U,
        U,
        V,
    >;

    foo(bar: string, baz: string);
                               ~   [Missing trailing comma]

    foo2(bar: string, baz: string,);

    foo3(
        bar: string,
        baz: string
    );

    foo4(
        bar: string,
        baz: string,
    );

    foo5<
        T extends Test<[A, A], [A, A,], A>,
                           ~                [Missing trailing comma]
                                        ~   [Missing trailing comma]
        U extends Test<B, B, B,>,
        V extends Test<
            [
                C,
                C
            ],
            [
                C,
                C,
            ]
            C
        >
    >(
        bar: A,
        baz: T,
    );

    foo6<
        T extends { foo: A; bar: B; },
        U extends { foo: A; bar: B; },
        V extends {
            foo: A;
            bar: B;
        },
        W extends {
            foo: [
                string,
                string
            ];
        }
    >();
}

interface ITest2<A, B, C> { }
                       ~      [Missing trailing comma]

interface ITest3<
    A,
    B,
    C
> { }

interface ITest4<
    A,
    B,
    C,
> { }

enum Foo { BAR, BAZ }
                  ~   [Missing trailing comma]

enum Foo { BAR, BAZ, }

enum Foo {
    Bar,
    Baz
}

enum Foo {
    Bar,
    Baz,
}

const enum Foo { BAR = 1, BAZ = 2 }
                                ~   [Missing trailing comma]

const enum Foo { BAR = 1, BAZ = 2, }

const enum Foo {
    Bar = 1,
    Baz = 2
}

const enum Foo {
    Bar = 1,
    Baz = 2,
}

