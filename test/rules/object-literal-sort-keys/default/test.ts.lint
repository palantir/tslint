var passA = {
    a: 1,
    b: 2
};

var failA = {
    b: 1,
    a: 2
    ~    [err % ('a')]
};

var passB = {
    a: 1,
    b: 2,
    c: 3,
    d: 4
};

var failB = {
    c: 3,
    a: 1,
    ~     [err % ('a')]
    b: 2,
    d: 4
};

var passC = {
    a: 1,
    b: {
        aa: 1,
        bb: 2
    }
};

var failC = {
    a: 1,
    b: {
        bb: 2,
        aa: 1
        ~~    [err % ('aa')]
    }
};

var passD = {
    a: 1,
    b: {
        aa: 1,
        bb: 2
    },
    c: 3
};

var failD = {
    a: 1,
    c: {
        aa: 1,
        bb: 2
    },
    b: 3
    ~    [err % ('b')]
};

var passE = {};

var passF = {
    asdf: [1, 2, 3],
    sdfa: {}
};

var failF = {
    sdfa: {},
    asdf: [1, 2, 3]
    ~~~~            [err % ('asdf')]
};

var passG = {
    asdfn: function () {},
    sdafn: function () {}
};

var failG = {
    sdafn: function () {},
    asdfn: function () {}
    ~~~~~                 [err % ('asdfn')]
};

var passH = {
    a: 1,
    'b': 2,
    c: 3
}

var failH = {
    'b': 2,
    a: 1,
    ~      [err % ('a')]
    c: 3
}

var passI = {
    'Z': 1,
    À: 2,
    è: 3
}

var failI = {
    À: 2,
    'Z': 1,
    ~~~    [err % ('Z')]
    è: 3,
}

var passJ = {
    1: 1,
    '11': 2
    2: 4,
    A: 3,
}

var failJ = {
    1: 1,
    2: 4,
    A: 3,
    '11': 2
    ~~~~   [err % ('11')]
}

var passK = {
    a: 1,
    'b': {
        'd': 4,
        e: 5
    },
    c: 3
}

var failK = {
    'b': {
        e: 5,
        'd': 4
        ~~~    [err % ('d')]
    },
    a: 1,
    ~     [err % ('a')]
    c: 3
}

var passL = {z: 1, y: '1', x: [1, 2]};

var failL = {x: 1, y: {
    b: 1,
    a: 2
    ~    [err % ('a')]
}, z: [1, 2]};

var passM = {
    x: 1,
    y: {
        a: 1,
        b: 2
    },
    z: {z: 1, y: '1', x: [1, 2]}
};

const spread = {
    c,
    ...x,
    b: b,
    a,
    ~ [err % ('a')]
};

const numbers = {
    1: true,
    2: true,
    100: true,
    1e4: true,
    2e-1: true,
}

const a = {
  array: [],
  objList: [{}, {}],
  object: {},
}

const b = {
  array: [],
  object: {},
  objList: [{}, {}],
  ~~~~~~~ [err % ('objList')]
}

var blankLineGroupingPassA = {
    a: 1,
    b: 2,
    d: 4,

    c: 3,
    e: 5,
};

var blankLineGroupingFailA = {
    a: 1,
    b: 2,
    d: 4,
    // non-empty line not counted as a new line
    c: 3,
    ~     [err % ('c')]
    e: 5,
};

var blankLineGroupingPassB = {
    a: 1,
    b: 2,
    d: 4,
    // a comment

    c: 3,
    e: 5,
};

var blankLineGroupingFailB = {
    a: 1,
    b: 2,
    c: 3,

    f: 6,
    e: 5,
    ~     [err % ('e')]
    d: 4
};

var blankLineGroupingPassC = {
    b: 1,

    // a single line comment before the group
    a: 2,
    c: 3,
};

var blankLineGroupingFailC = {
    b: 1,
    /* a multiline comment with

    an extra new line in the middle */
    a: 2,
    ~     [err % ('a')]
    c: 3,
};

var blankLineGroupingPassD = {
    b: 1,

    /* a multiline comment with a new line before and

    an extra new line in the middle, before a group */
    a: 2,
    c: 3,
};

var blankLineGroupingFailD = {
    b: 1,
    // a single-line comments
    /* a multiline comment with

    an extra new line in the middle */
    a: 2,
    ~     [err % ('a')]
    c: 3,
};

var blankLineGroupingPassE = {
    b: 1,
    /* a multiline comment with a new line after and

    an extra new line in the middle */

    a: 2,
    c: 3,
};

var blankLineGroupingFailE = {
    a: 1,
    c: `3 is a

    multiline string`,
    b: 2,
    ~     [err % ('b')]
    d: 4
}

var blankLineGroupingPassF = {
    b: 1,
    /* double multiline comments

    and a space between */

    /* more talking

    here */
    a: 2,
    c: 3,
};

var blankLineGroupingFailF = {
    b: 1,
    /* double multiline comments

    with no space between */
    /* more talking

    here */
    a: 2,
    ~     [err % ('a')]
    c: 3,
};

[err]: The key '%s' is not sorted alphabetically
