interface I {
    b;
    a;
}

declare function f(i: I): void;

const a = 0, b = 0;

f({ b, a });

f({ a, b });
       ~ [0 % ('b', 'I')]

// Resets ordering after spread operator.

f({ a, ...x, b });

f({ a, ...x, a, b });
                ~ [0 % ('b', 'I')]


// Methods and getters/setters work like any other key.

f({ b() {}, a() {} });

f({ a() {}, b() {} });
            ~ [0 % ('b', 'I')]

f({
    get b() {},
    a,
    set b(v) {},
        ~ [0 % ('b', 'I')]
});

f({
    get b() {},
    set b() {},
    a,
});

// Ignores computed properties. Does not ignore string / number keys.

interface J {
    "foo";
    2;
    [Symol.iterator];
}
declare function j(j: J): void;
j({ [Symbol.iterator]: 1, "foo": 1, 2: 1 });
j({ [Symbol.iterator]: 1, 2: 1, "foo": 1 });
                                ~~~~~ [0 % ('foo', 'J')]

// Works with anonymous type too.
type T = { b, a };
const o: T = { a, b };
                  ~ [0 % ('b', 'T')]

const o: { b, a } = { a, b };
                         ~ [1 % ('b')]

// Non-alphabetical ordering is fine, even if it can't find a type.

const o = {
    b,
    a,
};

[0]: The key '%s' is not in the same order as it is in '%s'.
[1]: The key '%s' is not in the same order as it is in its type declaration.
