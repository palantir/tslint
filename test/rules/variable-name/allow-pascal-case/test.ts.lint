var validName1 = "hi";
var VALIDNAME2 = "there";
var ValidName3 = ",";
var invalid_name1 = " "; // failure
    ~~~~~~~~~~~~~                   [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]

class Test {
    private Invalid_name3 = "how"; // failure
            ~~~~~~~~~~~~~                     [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]
    private _optionallyValid = "are"; // sometimes a failure
            ~~~~~~~~~~~~~~~~                                 [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]
}

function test() {
    () => {
        var InVaLiDnAmE4 = "you";
    };
}

declare var DeclaresAreValid: any;

export function functionWithInvalidParamNames (bad_name, AnotherOne) { // 1 failure
                                               ~~~~~~~~                              [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]
    //
}

let { foo, bar } = { foo: 1, bar: 2 };
let [ invalid_bar, ...invalid_baz ] =  [1, 2, 3, 4]; // 3 failures
      ~~~~~~~~~~~                                                  [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]
                      ~~~~~~~~~~~                                  [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]

export function anotherFunctionWithInvalidParamNames ([first_element, SecondElement]) { // 1 failure
                                                       ~~~~~~~~~~~~~                                  [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]
    //
}

export function functionWithInvalidSpread(invalid_arg: ...number) { // 1 failure
                                          ~~~~~~~~~~~                            [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]
  //
}

let optionallyValid_ = "bar";
    ~~~~~~~~~~~~~~~~          [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]
let _$httpBackend_ = "leading and trailing";
    ~~~~~~~~~~~~~~          [variable name must be in lowerCamelCase, PascalCase or UPPER_CASE]

// don't crash on syntax errors

class {}
let {bar:} = foo;
