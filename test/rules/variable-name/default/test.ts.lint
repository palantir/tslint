var validName1 = "hi";
var VALIDNAME2 = "there";
var InvalidName1 = ","; // failure
    ~~~~~~~~~~~~                   [variable name must be in lowerCamelCase or UPPER_CASE]
var invalid_name2 = " "; // failure
    ~~~~~~~~~~~~~                   [variable name must be in lowerCamelCase or UPPER_CASE]

class Test {
    private Invalid_name3 = "how"; // failure
            ~~~~~~~~~~~~~                     [variable name must be in lowerCamelCase or UPPER_CASE]
    private _optionallyValid = "are"; // sometimes a failure
            ~~~~~~~~~~~~~~~~                                 [variable name must be in lowerCamelCase or UPPER_CASE]
}

function test() {
    () => {
        var InVaLiDnAmE4 = "you"; // failure
            ~~~~~~~~~~~~                     [variable name must be in lowerCamelCase or UPPER_CASE]
    };
}

declare var DeclaresAreValid: any;

export function functionWithInvalidParamNames (bad_name, AnotherOne) { // 2 failures
                                               ~~~~~~~~                              [variable name must be in lowerCamelCase or UPPER_CASE]
                                                         ~~~~~~~~~~                  [variable name must be in lowerCamelCase or UPPER_CASE]
    //
}

let { foo, bar } = { foo: 1, bar: 2 };
let [ InvalidFoo, invalid_bar, ...invalid_baz ] =  [1, 2, 3, 4]; // 3 failures
      ~~~~~~~~~~                                                               [variable name must be in lowerCamelCase or UPPER_CASE]
                  ~~~~~~~~~~~                                                  [variable name must be in lowerCamelCase or UPPER_CASE]
                                  ~~~~~~~~~~~                                  [variable name must be in lowerCamelCase or UPPER_CASE]

export function anotherFunctionWithInvalidParamNames ([first_element, SecondElement]) { // 2 failures
                                                       ~~~~~~~~~~~~~                                  [variable name must be in lowerCamelCase or UPPER_CASE]
                                                                      ~~~~~~~~~~~~~                   [variable name must be in lowerCamelCase or UPPER_CASE]
    //
}

export function functionWithInvalidSpread(invalid_arg: ...number) { // 1 failure
                                          ~~~~~~~~~~~                            [variable name must be in lowerCamelCase or UPPER_CASE]
  //
}

let optionallyValid_ = "bar";
    ~~~~~~~~~~~~~~~~          [variable name must be in lowerCamelCase or UPPER_CASE]
let _$httpBackend_ = "leading and trailing";
    ~~~~~~~~~~~~~~          [variable name must be in lowerCamelCase or UPPER_CASE]

// Aliases.
class X {
  ValidAlias = ValidAlias;
}

var ValidAlias = some.ValidAlias;
var ValidAlias = some.InValidAlias;
    ~~~~~~~~~~                [variable name must be in lowerCamelCase or UPPER_CASE]

var someObject = {MoreValidAlias: 1};
var {MoreValidAlias: localVar} = someObject;
var {MoreValidAlias: LocalVar} = someObject;
                     ~~~~~~~~                [variable name must be in lowerCamelCase or UPPER_CASE]
var {MoreValidAlias} = someObject;
