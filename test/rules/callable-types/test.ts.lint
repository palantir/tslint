interface I {
    (): void;
    ~~~~~~~~~   [interface % ('type I = () => void;')]
}

interface J extends Function {
    (): void;
    ~~~~~~~~~                    [interface % ('type J = () => void;')]
}

interface K<T> {
    <U extends T>(param1: U, param2: T): U;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [interface % ('type K<T> = <U extends T>(param1: U, param2: T) => U;')]
}

interface L<T> {
    (): T
    ~~~~~ [interface % ('type L<T> = () => T')]
}

type T = {
    (): void;
    ~~~~~~~~~ [type % ('() => void')]
};

type U = {
    <T>(t: T): T;
    ~~~~~~~~~~~~~ [type % ('<T>(t: T) => T')]
}

var fn: {(): void;};
         ~~~~~~~~~ [type % ('() => void')]
function f(x: { (): void }): void;
                ~~~~~~~~ [type % ('() => void')]
function f(x: string | { (): void }): void;
                         ~~~~~~~~ [type % ('(() => void)')]
function f(x: string | ({ (): void })): void;
                          ~~~~~~~~ [type % ('() => void')]
function f(x: { (): string } | { (): number }): void;
                ~~~~~~~~~~ [type % ('(() => string)')]
                                 ~~~~~~~~~~ [type % ('(() => number)')]
function f(x: string & { (): void }): void;
                         ~~~~~~~~ [type % ('(() => void)')]
function f(x: { (): string } & { (): number }): void;
                ~~~~~~~~~~ [type % ('(() => string)')]
                                 ~~~~~~~~~~ [type % ('(() => number)')]
function f(x: { (): string }[]): void;
                ~~~~~~~~~~ [type % ('(() => string)')]

// Overloads OK
interface K {
    (x: number): number;
    (x: string): string;
}

// handle modifiers
export interface I0 {
    (): void;
    ~~~~~~~~~ [interface % ('type I0 = () => void;')]
}

export interface I1 {
    new (): void;
    ~~~~~~~~~~~~~ [interface % ('type I1 = new () => void;')]
}

export type T = {
    (): void;
    ~~~~~~~~~ [type % ('() => void')]
}

[_base]: %s has only a call signature â€” use `%s` instead.
[interface]: _base % ('Interface')
[type]: _base % ('Type literal')
