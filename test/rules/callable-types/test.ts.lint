interface I {
    (): void;
    ~~~~~~~~~   [Interface has only a call signature — use `type I = () => void;` instead.]
}

interface J extends Function {
    (): void;
    ~~~~~~~~~                    [Interface has only a call signature — use `type J = () => void;` instead.]
}

interface K<T> {
    <U extends T>(param1: U, param2: T): U;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [Interface has only a call signature — use `type K<T> = <U extends T>(param1: U, param2: T) => U;` instead.]
}

interface L<T> {
    (): T
    ~~~~~ [Interface has only a call signature — use `type L<T> = () => T` instead.]
}

type T = {
    (): void;
    ~~~~~~~~~ [Type literal has only a call signature — use `() => void` instead.]
};

type U = {
    <T>(t: T): T;
    ~~~~~~~~~~~~~ [Type literal has only a call signature — use `<T>(t: T) => T` instead.]
}

var fn: {(): void;};
         ~~~~~~~~~ [Type literal has only a call signature — use `() => void` instead.]
function f(x: { (): void }): void;
                ~~~~~~~~ [Type literal has only a call signature — use `() => void` instead.]

// Overloads OK
interface K {
    (x: number): number;
    (x: string): string;
}
