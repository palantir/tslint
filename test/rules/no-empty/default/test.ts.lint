if (x === 1) {}
             ~~ [block is empty]
if (x === 2) {
             ~

~nil

~nil
}
~ [block is empty]

function testFunction1() {
                         ~

~nil
}
~ [block is empty]

const testFunction2 = () => { };
                            ~~~  [block is empty]

const testFunction3 = function() {}
                                 ~~ [block is empty]

const testFunction4 = function(): void {}
                                       ~~ [block is empty]

for (var x = 0; x < 1; ++x) { }
                            ~~~ [block is empty]

// empty blocks with comments should be legal
for (var y = 0; y < 1; ++y) {
    // empty here
}
{ // empty block allowed
}
{
    /* this block is also empty, but allowed to be */
}

class testClass {
    constructor(private allowed: any, private alsoAllowed: any) {
    }
}

class testClass2 {
    constructor(protected allowed: any) {
    }
}

class testClass3 {
    constructor(notAllowed: any) {
                                 ~
    }
~~~~~ [block is empty]
}

class testClass4 {
    constructor(readonly allowed: any) {
    }
}

class PrivateClassConstructor {
    private constructor() {}
}

class ProtectedClassConstructor {
    protected constructor() {}
}

class PublicClassConstructor {
    public constructor() {}
                         ~~ [block is empty]
}

class ClassMethod {
    public methodWithoutResultTypehinting() {}
                                            ~~ [block is empty]

    public methodWithResultTypehinting(): void {}
                                               ~~ [block is empty]
}

try {
    throw new Error();
} catch (error) {}
                ~~ [block is empty]
