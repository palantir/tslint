class FailingExample1 {
    constructor(fruit: string, public num: number, private animal: string) {
        this.num = 10;
        num = 5;
        ~~~ [The constructor parameter 'num' should only be accessed with the 'this' keyword: 'this.num']

        animal = "aardvark";
        ~~~~~~ [The constructor parameter 'animal' should only be accessed with the 'this' keyword: 'this.animal']
        this.animal = "skunk";

        fruit = "banana";
        ~~~~~ [The constructor parameter 'fruit' should only be accessed with the 'this' keyword: 'this.fruit']
        this.fruit = "persimmon";
    }
}

class FailingExample2 {
    constructor(thing: Object) {
        const wow=thing.doTheThing()
                  ~~~~~ [The constructor parameter 'thing' should only be accessed with the 'this' keyword: 'this.thing']
        console.log(wow,thing.amazingDvdCollection);
                        ~~~~~ [The constructor parameter 'thing' should only be accessed with the 'this' keyword: 'this.thing']
        
        const pasta = thing.nested.makePasta();
                      ~~~~~ [The constructor parameter 'thing' should only be accessed with the 'this' keyword: 'this.thing']

        thing = {};
        ~~~~~ [The constructor parameter 'thing' should only be accessed with the 'this' keyword: 'this.thing']

        this.thing.doSomethingElse();
    }
}

class PassingExample1 {
    constructor(a: string, private b: string, public c: string) {
        this.a = "aaa";
        this.b = "bbb";
        this.c = "ccc";
    }
}

class PassingExample2 {
    constructor(a: Object, private b: Object, public c: Object) {
        this.a.doThing();
        this.b.doOtherThing();
        this.c.doLastThing();
    }
}