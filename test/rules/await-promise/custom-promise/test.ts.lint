class CustomPromise<T> {}

async function fAny() {
    const isAny: any = 1;

    // any type
    await isAny;

    // union type with any type
    await (Math.random() > 0.5 ? isAny : 0);
}

async function fNonPromise() {
    // number type
    await 0;
    ~~~~~~~ [0]

    // union type without Promise
    await (Math.random() > 0.5 ? "" : 0);
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [0]

    // non Promise type
    class NonPromise extends Array {}
    await new NonPromise();
    ~~~~~~~~~~~~~~~~~~~~~~ [0]
}

async function fStandardPromise() {
    // direct type
    const numberPromise: Promise<number>;
    await numberPromise;

    // 1st level base type
    class Foo extends Promise<number> {}
    const foo: Foo = Foo.resolve(2);
    await foo;

    // 2nd level base type
    class Bar extends Foo {}
    const bar: Bar = Bar.resolve(2);
    await bar;

    // union type
    await (Math.random() > 0.5 ? numberPromise : 0);
    await (Math.random() > 0.5 ? foo : 0);
    await (Math.random() > 0.5 ? bar : 0);

    // intersection type
    const intersectionPromise: Promise<number> & number;
    await intersectionPromise;
}

async function fCustomPromise() {
    // direct type
    const numberPromise: CustomPromise<number>;
    await numberPromise;

    // 1st level base type
    class Foo extends CustomPromise<number> {}
    const foo: Foo = Foo.resolve(2);
    await foo;

    // 2nd level base type
    class Bar extends Foo {}
    const bar: Bar = Bar.resolve(2);
    await bar;

    // union type
    await (Math.random() > 0.5 ? numberPromise : 0);
    await (Math.random() > 0.5 ? foo : 0);
    await (Math.random() > 0.5 ? bar : 0);

    // intersection type
    const intersectionPromise: CustomPromise<number> & number;
    await intersectionPromise;
}

[0]: Invalid 'await' of a non-Promise value.
