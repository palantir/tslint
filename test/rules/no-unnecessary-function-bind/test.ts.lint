const arrowLambda = () => {};
const functionVar = function () {};

class Class {
    public constructor() { }

    public bind() { }

    public method() { }
}

const instance = new Class();

arrowLambda.bind(this);
~~~~~~~~~~~~~~~~~~~~~~ [arrow]
arrowLambda.bind(arrowLambda);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [arrow]
arrowLambda.bind(undefined);
~~~~~~~~~~~~~~~~~~~~~~~~~~~ [arrow]

functionVar.bind(this);
~~~~~~~~~~~~~~~~~~~~~~ [function]
functionVar.bind(functionVar);
functionVar.bind(undefined);

const immediatelyBoundFunction = function () {}.bind(this);
                                 ~~~~~~~~~~~~~~~~~~~~~~~~~ [function]
const immediatelyBoundFunctionWrapped = (function () {}).bind(this);
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~ [function

instance.method.bind(this);

instance.bind(this);

Class.bind(this);
[arrow]: Don't bind scopes to arrow lambdas, as they already have a bound scope.
[function]: Don't bind `this` without arguments as a scope to a function. Use an arrow lambda instead.
