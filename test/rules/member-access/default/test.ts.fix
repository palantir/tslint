declare class AmbientNoAccess {
    public a(): number;

    public static b(): number;
}

declare class AmbientAccess {
    public a(): number;
    public static b(): number;
}

class Members {
    [x: string]: number;
    public i: number;
    public static j: number;

    public nPublic: number;
    protected nProtected: number;
    private nPrivate: number;

    public static nsPublic: number;
    protected static nsProtected: number;
    private static nsPrivate: number;

    public noAccess(x: number): number;
    public noAccess(o: any): any {}

    public static noAccess(x: number): number;
    public static noAccess(o: any): any {}

    public access(x: number): number;
    public access(o: any): any {}

    public static access(x: number): number;
    public static access(o: any): any {}
}

const obj = {
    func() {}
};

function main() {
    class A {
        public i: number;
        public static j: number;
        public n: number;
    }
}

abstract class Decorated {
    @decorator public prop;
    @decorator public abstract method() {}
    @decorator @moreDecorator({}) public readonly static PROP = 'FOO';
}
