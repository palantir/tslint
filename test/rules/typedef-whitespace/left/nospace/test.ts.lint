// region ObjectLiteralWithPropertyGetter

var noPreceedingSpaceNoSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop():string {
        return this._Prop;
    }
};

var noPreceedingSpaceWithSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop(): string {
        return this._Prop;
    }
};

var noPreceedingSpaceWithSubsequentSpacesObject = {
    _Prop: "some property",

    get Prop():   string {
        return this._Prop;
    }
};

var withPreceedingSpaceNoSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop() :string {
              ~ [before-call]
        return this._Prop;
    }
};

var withPreceedingSpaceWithSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop() : string {
              ~ [before-call]
        return this._Prop;
    }
};

var withPreceedingSpaceWithSubsequentSpacesObject = {
    _Prop: "some property",

    get Prop() :   string {
              ~ [before-call]
        return this._Prop;
    }
};

var withPreceedingSpacesNoSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop()   :string {
              ~~~ [before-call]
        return this._Prop;
    }
};

var withPreceedingSpacesWithSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop()   : string {
              ~~~ [before-call]
        return this._Prop;
    }
};

var withPreceedingSpacesWithSubsequentSpacesObject = {
    _Prop: "some property",

    get Prop()   :   string {
              ~~~ [before-call]
        return this._Prop;
    }
};

var noPreceedingSpaceWithSubsequentNewLineObject = {
    _Prop:
        "some property",

    get Prop():
        string {
        return this._Prop;
    }
};

// endregion

// region Interface

interface NoPreceedingSpaceNoSubsequentSpaceInterface {
    Prop:string;
}

interface NoPreceedingSpaceWithSubsequentSpaceInterface {
    Prop: string;
}

interface NoPreceedingSpaceWithSubsequentSpacesInterface {
    Prop:   string;
}

interface WithPreceedingSpaceNoSubsequentSpaceInterface {
    Prop :string;
        ~ [before-property]
}

interface WithPreceedingSpaceWithSubsequentSpaceInterface {
    Prop : string;
        ~ [before-property]
}

interface WithPreceedingSpaceWithSubsequentSpacesInterface {
    Prop :   string;
        ~ [before-property]
}

interface WithPreceedingSpacesNoSubsequentSpaceInterface {
    Prop   :string;
        ~~~ [before-property]
}

interface WithPreceedingSpacesWithSubsequentSpaceInterface {
    Prop   : string;
        ~~~ [before-property]
}

interface WithPreceedingSpacesWithSubsequentSpacesInterface {
    Prop   :   string;
        ~~~ [before-property]
}

interface NoPreceedingSpaceNoSubsequentSpaceAndNewLineInterface {
    Prop:
        string;
}

// endregion

// region Function

function noPreceedingSpaceNoSubsequentSpaceFn(a:number, b:number):number {
    var c:number = a + b;
    var d:number = a - b;

    try {
        return c / d;
    } catch (ex:Exception) {
        console.log(ex);
    }
}

function noPreceedingSpaceWithSubsequentSpaceFn(a: number, b: number): number {
    var c: number = a + b;
    var d: number = a - b;

    try {
        return c / d;
    } catch (ex: Exception) {
        console.log(ex);
    }
}

function noPreceedingSpaceWithSubsequentSpacesFn(a:   number, b:   number):   number {
    var c:   number = a + b;
    var d:   number = a - b;

    try {
        return c / d;
    } catch (ex:   Exception) {
        console.log(ex);
    }
}

function withPreceedingSpaceNoSubsequentSpaceFn(a :number, b :number) :number {
                                                 ~ [before-parameter]
                                                            ~ [before-parameter]
                                                                     ~ [before-call]
    var c :number = a + b;
         ~ [before-variable]
    var d :number = a - b;
         ~ [before-variable]

    try {
        return c / d;
    } catch (ex :Exception) {
               ~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpaceFn(a : number, b : number) : number {
                                                   ~ [before-parameter]
                                                               ~ [before-parameter]
                                                                         ~ [before-call]
    var c : number = a + b;
         ~ [before-variable]
    var d : number = a - b;
         ~ [before-variable]

    try {
        return c / d;
    } catch (ex : Exception) {
               ~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpacesFn(a :   number, b :   number) :   number {
                                                    ~ [before-parameter]
                                                                  ~ [before-parameter]
                                                                              ~ [before-call]
    var c :   number = a + b;
         ~ [before-variable]
    var d :   number = a - b;
         ~ [before-variable]

    try {
        return c / d;
    } catch (ex :   Exception) {
               ~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpacesNoSubsequentSpaceFn(a   :number, b   :number)   :number {
                                                  ~~~ [before-parameter]
                                                               ~~~ [before-parameter]
                                                                          ~~~ [before-call]
    var c   :number = a + b;
         ~~~ [before-variable]
    var d   :number = a - b;
         ~~~ [before-variable]

    try {
        return c / d;
    } catch (ex   :Exception) {
               ~~~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpacesWithSubsequentSpaceFn(a   : number, b   : number)   : number {
                                                    ~~~ [before-parameter]
                                                                  ~~~ [before-parameter]
                                                                              ~~~ [before-call]
    var c   : number = a + b;
         ~~~ [before-variable]
    var d   : number = a - b;
         ~~~ [before-variable]

    try {
        return c / d;
    } catch (ex   : Exception) {
               ~~~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpacesWithSubsequentSpacesFn(a   :   number, b   :   number)   :   number {
                                                     ~~~ [before-parameter]
                                                                     ~~~ [before-parameter]
                                                                                   ~~~ [before-call]
    var c   :   number = a + b;
         ~~~ [before-variable]
    var d   :   number = a - b;
         ~~~ [before-variable]

    try {
        return c / d;
    } catch (ex   :   Exception) {
               ~~~ [before-variable]
        console.log(ex);
    }
}

function noPreceedingSpaceNoSubsequentSpaceAndNewLineFn(a:
    number, b:
    number):
    number {
    var c:
        number = a + b;
    var d
        : number = a - b;

    try {
        return c / d;
    } catch (ex:
        Exception) {
        console.log(ex);
    }
}

// endregion

// region Function multi-line signature

function noPreceedingSpaceNoSubsequentSpaceMultiLineFn(
    a:number,
    b:number
):number {
    var c:number = a + b;
    var d:number = a - b;

    try {
        return c / d;
    } catch (ex:Exception) {
        console.log(ex);
    }
}

function noPreceedingSpaceWithSubsequentSpaceMultiLineFn(
    a: number,
    b: number
): number {
    var c: number = a + b;
    var d: number = a - b;

    try {
        return c / d;
    } catch (ex: Exception) {
        console.log(ex);
    }
}

function noPreceedingSpaceWithSubsequentSpacesMultiLineFn(
    a:   number,
    b:   number
):   number {
    var c:   number = a + b;
    var d:   number = a - b;

    try {
        return c / d;
    } catch (ex:   Exception) {
        console.log(ex);
    }
}

function withPreceedingSpaceNoSubsequentSpaceMultiLineFn(
    a :number,
     ~ [before-parameter]
    b :number
     ~ [before-parameter]
) :number {
 ~ [before-call]
    var c :number = a + b;
         ~ [before-variable]
    var d :number = a - b;
         ~ [before-variable]

    try {
        return c / d;
    } catch (ex :Exception) {
               ~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpaceMultiLineFn(
    a : number,
     ~ [before-parameter]
    b : number
     ~ [before-parameter]
) : number {
 ~ [before-call]
    var c : number = a + b;
         ~ [before-variable]
    var d : number = a - b;
         ~ [before-variable]

    try {
        return c / d;
    } catch (ex : Exception) {
               ~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpacesMultiLineFn(
    a :   number,
     ~ [before-parameter]
    b :   number
     ~ [before-parameter]
) :   number {
 ~ [before-call]
    var c :   number = a + b;
         ~ [before-variable]
    var d :   number = a - b;
         ~ [before-variable]

    try {
        return c / d;
    } catch (ex :   Exception) {
               ~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpacesNoSubsequentSpaceMultiLineFn(
    a   :number,
     ~~~ [before-parameter]
    b   :number
     ~~~ [before-parameter]
)   :number {
 ~~~ [before-call]
    var c   :number = a + b;
         ~~~ [before-variable]
    var d   :number = a - b;
         ~~~ [before-variable]

    try {
        return c / d;
    } catch (ex   :Exception) {
               ~~~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpacesWithSubsequentSpaceMultiLineFn(
    a   : number,
     ~~~ [before-parameter]
    b   : number
     ~~~ [before-parameter]
)   : number {
 ~~~ [before-call]
    var c   : number = a + b;
         ~~~ [before-variable]
    var d   : number = a - b;
         ~~~ [before-variable]

    try {
        return c / d;
    } catch (ex   : Exception) {
               ~~~ [before-variable]
        console.log(ex);
    }
}

function withPreceedingSpacesWithSubsequentSpacesMultiLineFn(
    a   :   number,
     ~~~ [before-parameter]
    b   :   number
     ~~~ [before-parameter]
)   :   number {
 ~~~ [before-call]
    var c   :   number = a + b;
         ~~~ [before-variable]
    var d   :   number = a - b;
         ~~~ [before-variable]

    try {
        return c / d;
    } catch (ex   :   Exception) {
               ~~~ [before-variable]
        console.log(ex);
    }
}

// endregion

// region CallSignaturePaddedParams

function noPreceedingSpaceNoSubsequentSpaceSignature( ):{};

function noPreceedingSpaceWithSubsequentSpaceSignature( ): {};

function noPreceedingSpaceWithSubsequentSpacesSignature( ):   {};

function withPreceedingSpaceNoSubsequentSpaceSignature( ) :{};
                                                         ~ [before-call]

function withPreceedingSpaceWithSubsequentSpaceSignature( ) : {};
                                                           ~ [before-call]

function withPreceedingSpaceWithSubsequentSpacesSignature( ) :   {};
                                                            ~ [before-call]

function withPreceedingSpacesNoSubsequentSpaceSignature( )   :{};
                                                          ~~~ [before-call]

function withPreceedingSpacesWithSubsequentSpaceSignature( )   : {};
                                                            ~~~ [before-call]

function withPreceedingSpacesWithSubsequentSpacesSignature( )   :   {};
                                                             ~~~ [before-call]

function noPreceedingSpaceNoSubsequentSpaceAndNewLineSignature( ):
    {};

// endregion

// region Class

class NoPreceedingSpaceNoSubsequentSpaceClass {
    [index:number]:string

    Prop:string = "some property";

    public get name():string {
        return "some name";
    }

    public set name(a:string):void {}

    public shemp(
        a:number,
        b:number
    ):void {}
}

class NoPreceedingSpaceWithSubsequentSpaceClass {
    [index: number]: string

    Prop: string = "some property";

    public get name(): string {
        return "some name";
    }

    public set name(a: string): void {}

    public shemp(
        a: number,
        b: number
    ): void {}
}

class NoPreceedingSpaceWithSubsequentSpacesClass {
    [index:   number]:   string

    Prop:   string = "some property";

    public get name():   string {
        return "some name";
    }

    public set name(a:   string):   void {}

    public shemp(
        a:   number,
        b:   number
    ):   void {}
}

class WithPreceedingSpaceNoSubsequentSpaceClass {
    [index :number] :string
          ~ [before-parameter]
                   ~ [before-index]

    Prop :string = "some property";
        ~ [before-property]

    public get name() :string {
                     ~ [before-call]
        return "some name";
    }

    public set name(a :string) :void {}
                     ~ [before-parameter]
                              ~ [before-call]

    public shemp(
        a :number,
         ~ [before-parameter]
        b :number
         ~ [before-parameter]
    ) :void {}
     ~ [before-call]
}

class WithPreceedingSpaceWithSubsequentSpaceClass {
    [index : number] : string
          ~ [before-parameter]
                    ~ [before-index]

    Prop : string = "some property";
        ~ [before-property]

    public get name() : string {
                     ~ [before-call]
        return "some name";
    }

    public set name(a : string) : void {}
                     ~ [before-parameter]
                               ~ [before-call]

    public shemp(
        a : number,
         ~ [before-parameter]
        b : number
         ~ [before-parameter]
    ) : void {}
     ~ [before-call]
}

class WithPreceedingSpaceWithSubsequentSpacesClass {
    [index :   number] :   string
          ~ [before-parameter]
                      ~ [before-index]

    Prop :   string = "some property";
        ~ [before-property]

    public get name() :   string {
                     ~ [before-call]
        return "some name";
    }

    public set name(a :   string) :   void {}
                     ~ [before-parameter]
                                 ~ [before-call]

    public shemp(
        a :   number,
         ~ [before-parameter]
        b :   number
         ~ [before-parameter]
    ) :   void {}
     ~ [before-call]
}

class WithPreceedingSpacesNoSubsequentSpaceClass {
    [index   :number]   :string
          ~~~ [before-parameter]
                     ~~~ [before-index]

    Prop   :string = "some property";
        ~~~ [before-property]

    public get name()   :string {
                     ~~~ [before-call]
        return "some name";
    }

    public set name(a   :string)   :void {}
                     ~~~ [before-parameter]
                                ~~~ [before-call]

    public shemp(
        a   :number,
         ~~~ [before-parameter]
        b   :number
         ~~~ [before-parameter]
    )   :void {}
     ~~~ [before-call]
}

class WithPreceedingSpacesWithSubsequentSpaceClass {
    [index   : number]   : string
          ~~~ [before-parameter]
                      ~~~ [before-index]

    Prop   : string = "some property";
        ~~~ [before-property]

    public get name()   : string {
                     ~~~ [before-call]
        return "some name";
    }

    public set name(a   : string)   : void {}
                     ~~~ [before-parameter]
                                 ~~~ [before-call]

    public shemp(
        a   : number,
         ~~~ [before-parameter]
        b   : number
         ~~~ [before-parameter]
    )   : void {}
     ~~~ [before-call]
}

class WithPreceedingSpacesWithSubsequentSpacesClass {
    [index   :   number]   :   string
          ~~~ [before-parameter]
                        ~~~ [before-index]

    Prop   :   string = "some property";
        ~~~ [before-property]

    public get name()   :   string {
                     ~~~ [before-call]
        return "some name";
    }

    public set name(a   :   string)   :   void {}
                     ~~~ [before-parameter]
                                   ~~~ [before-call]

    public shemp(
        a   :   number,
         ~~~ [before-parameter]
        b   :   number
         ~~~ [before-parameter]
    )   :   void {}
     ~~~ [before-call]
}

class NoPreceedingSpaceNoSubsequentSpaceAndNewLineClass {
    [index:number]:
        string

    Prop:
        string = "some property";

    public get name():
        string {
        return "some name";
    }

    public set name(a:
        string):
        void {}

    public shemp(
        a:
        number,
        b:
        number
    ):
    void {}
}

let foo = ():void => {};
let foo = () : void => {};
            ~ [before-call]
let foo = ()   :   void => {};
            ~~~ [before-call]

// endregion

[_base]: expected nospace %s colon in %s
[before-call]: _base % ('before', 'call-signature')
[before-parameter]: _base % ('before', 'parameter')
[before-index]: _base % ('before', 'index-signature')
[before-variable]: _base % ('before', 'variable-declaration')
[before-property]: _base % ('before', 'property-declaration')
[after-property]: _base % ('after', 'property-declaration')