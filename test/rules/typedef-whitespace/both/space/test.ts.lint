// region ObjectLiteralWithPropertyGetter

var noPreceedingSpaceNoSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop():string {
             ~             [expected space before colon in call-signature]
               ~           [expected space after colon in call-signature]
        return this._Prop;
    }
};

var noPreceedingSpaceWithSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop(): string {
             ~           [expected space before colon in call-signature]
        return this._Prop;
    }
};

var noPreceedingSpaceWithSubsequentSpacesObject = {
    _Prop: "some property",

    get Prop():   string {
             ~             [expected space before colon in call-signature]
        return this._Prop;
    }
};

var withPreceedingSpaceNoSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop() :string {
                ~           [expected space after colon in call-signature]
        return this._Prop;
    }
};

var withPreceedingSpaceWithSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop() : string {
        return this._Prop;
    }
};

var withPreceedingSpaceWithSubsequentSpacesObject = {
    _Prop: "some property",

    get Prop() :   string {
        return this._Prop;
    }
};

var withPreceedingSpacesNoSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop()   :string {
                  ~           [expected space after colon in call-signature]
        return this._Prop;
    }
};

var withPreceedingSpacesWithSubsequentSpaceObject = {
    _Prop: "some property",

    get Prop()   : string {
        return this._Prop;
    }
};

var withPreceedingSpacesWithSubsequentSpacesObject = {
    _Prop: "some property",

    get Prop()   :   string {
        return this._Prop;
    }
};

var withPreceedingSpaceWithSubsequentNewLineObject = {
    _Prop :
        "some property",

    get Prop() :
        string {
        return this._Prop;
    }
};

var noPreceedingSpaceWithSubsequentSpaceAndNewLineObject = {
    _Prop : 
           ~ [trailing whitespace]
        "some property",

    get Prop() : 
                ~ [trailing whitespace]
        string {
        return this._Prop;
    }
};

// endregion

// region Interface

interface NoPreceedingSpaceNoSubsequentSpaceInterface {
    Prop:string;
       ~             [expected space before colon in property-declaration]
         ~           [expected space after colon in property-declaration]
}

interface NoPreceedingSpaceWithSubsequentSpaceInterface {
    Prop: string;
       ~           [expected space before colon in property-declaration]
}

interface NoPreceedingSpaceWithSubsequentSpacesInterface {
    Prop:   string;
       ~             [expected space before colon in property-declaration]
}

interface WithPreceedingSpaceNoSubsequentSpaceInterface {
    Prop :string;
          ~           [expected space after colon in property-declaration]
}

interface WithPreceedingSpaceWithSubsequentSpaceInterface {
    Prop : string;
}

interface WithPreceedingSpaceWithSubsequentSpacesInterface {
    Prop :   string;
}

interface WithPreceedingSpacesNoSubsequentSpaceInterface {
    Prop   :string;
            ~           [expected space after colon in property-declaration]
}

interface WithPreceedingSpacesWithSubsequentSpaceInterface {
    Prop   : string;
}

interface WithPreceedingSpacesWithSubsequentSpacesInterface {
    Prop   :   string;
}

interface WithPreceedingSpaceNoSubsequentSpaceAndNewLineInterface {
    Prop :
        string;
}

interface WithPreceedingSpaceWithSubsequentSpaceAndNewLineInterface {
    Prop : 
          ~ [trailing whitespace]
        string;
}

// endregion

// region Function

function noPreceedingSpaceNoSubsequentSpaceFn(a:number, b:number):number {
                                              ~                              [expected space before colon in parameter]
                                                ~                            [expected space after colon in parameter]
                                                        ~                    [expected space before colon in parameter]
                                                          ~                  [expected space after colon in parameter]
                                                                ~            [expected space before colon in call-signature]
                                                                  ~          [expected space after colon in call-signature]
    var c:number = a + b;
        ~            [expected space before colon in variable-declaration]
          ~          [expected space after colon in variable-declaration]
    var d:number = a - b;
        ~            [expected space before colon in variable-declaration]
          ~          [expected space after colon in variable-declaration]

    try {
        return c / d;
    } catch (ex:Exception) {
              ~            [expected space before colon in variable-declaration]
                ~          [expected space after colon in variable-declaration]
        console.log(ex);
    }
}

function noPreceedingSpaceWithSubsequentSpaceFn(a: number, b: number): number {
                                                ~                              [expected space before colon in parameter]
                                                           ~                   [expected space before colon in parameter]
                                                                    ~          [expected space before colon in call-signature]
    var c: number = a + b;
        ~          [expected space before colon in variable-declaration]
    var d: number = a - b;
        ~          [expected space before colon in variable-declaration]

    try {
        return c / d;
    } catch (ex: Exception) {
              ~          [expected space before colon in variable-declaration]
        console.log(ex);
    }
}

function noPreceedingSpaceWithSubsequentSpacesFn(a:   number, b:   number):   number {
                                                 ~                                    [expected space before colon in parameter]
                                                              ~                       [expected space before colon in parameter]
                                                                         ~            [expected space before colon in call-signature]
    var c:   number = a + b;
        ~            [expected space before colon in variable-declaration]
    var d:   number = a - b;
        ~            [expected space before colon in variable-declaration]

    try {
        return c / d;
    } catch (ex:   Exception) {
              ~            [expected space before colon in variable-declaration]
        console.log(ex);
    }
}

function withPreceedingSpaceNoSubsequentSpaceFn(a :number, b :number) :number {
                                                   ~                              [expected space after colon in parameter]
                                                              ~                   [expected space after colon in parameter]
                                                                       ~          [expected space after colon in call-signature]
    var c :number = a + b;
           ~          [expected space after colon in variable-declaration]
    var d :number = a - b;
           ~          [expected space after colon in variable-declaration]

    try {
        return c / d;
    } catch (ex :Exception) {
                 ~          [expected space after colon in variable-declaration]
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpaceFn(a : number, b : number) : number {
    var c : number = a + b;
    var d : number = a - b;

    try {
        return c / d;
    } catch (ex : Exception) {
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpacesFn(a :   number, b :   number) :   number {
    var c :   number = a + b;
    var d :   number = a - b;

    try {
        return c / d;
    } catch (ex :   Exception) {
        console.log(ex);
    }
}

function withPreceedingSpacesNoSubsequentSpaceFn(a   :number, b   :number)   :number {
                                                      ~                                [expected space after colon in parameter]
                                                                   ~                   [expected space after colon in parameter]
                                                                              ~        [expected space after colon in call-signature]
    var c   :number = a + b;
             ~          [expected space after colon in variable-declaration]
    var d   :number = a - b;
             ~          [expected space after colon in variable-declaration]

    try {
        return c / d;
    } catch (ex   :Exception) {
                   ~          [expected space after colon in variable-declaration]
        console.log(ex);
    }
}

function withPreceedingSpacesWithSubsequentSpaceFn(a   : number, b   : number)   : number {
    var c   : number = a + b;
    var d   : number = a - b;

    try {
        return c / d;
    } catch (ex   : Exception) {
        console.log(ex);
    }
}

function withPreceedingSpacesWithSubsequentSpacesFn(a   :   number, b   :   number)   :   number {
    var c   :   number = a + b;
    var d   :   number = a - b;

    try {
        return c / d;
    } catch (ex   :   Exception) {
        console.log(ex);
    }
}

function withPreceedingSpaceNoSubsequentSpaceAndNewLineFn(a :
    number, b :
    number) :
    number {
    var c :
        number = a + b;
    var d :
        number = a - b;

    try {
        return c / d;
    } catch (ex :
        Exception) {
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpaceAndNewLineFn(a : 
                                                               ~ [trailing whitespace]
    number, b : 
               ~ [trailing whitespace]
    number) : 
             ~ [trailing whitespace]
number {
    var c : 
           ~ [trailing whitespace]
        number = a + b;
    var d : 
           ~ [trailing whitespace]
        number = a - b;

    try {
        return c / d;
    } catch (ex : 
                 ~ [trailing whitespace]
        Exception) {
        console.log(ex);
    }
}

// endregion

// region Function multi-line signature

function noPreceedingSpaceNoSubsequentSpaceMultiLineFn(
    a:number,
    ~            [expected space before colon in parameter]
      ~          [expected space after colon in parameter]
    b:number
    ~            [expected space before colon in parameter]
      ~          [expected space after colon in parameter]
):number {
~            [expected space before colon in call-signature]
  ~          [expected space after colon in call-signature]
    var c:number = a + b;
        ~            [expected space before colon in variable-declaration]
          ~          [expected space after colon in variable-declaration]
    var d:number = a - b;
        ~            [expected space before colon in variable-declaration]
          ~          [expected space after colon in variable-declaration]

    try {
        return c / d;
    } catch (ex:Exception) {
              ~            [expected space before colon in variable-declaration]
                ~          [expected space after colon in variable-declaration]
        console.log(ex);
    }
}

function noPreceedingSpaceWithSubsequentSpaceMultiLineFn(
    a: number,
    ~          [expected space before colon in parameter]
    b: number
    ~          [expected space before colon in parameter]
): number {
~          [expected space before colon in call-signature]
    var c: number = a + b;
        ~          [expected space before colon in variable-declaration]
    var d: number = a - b;
        ~          [expected space before colon in variable-declaration]

    try {
        return c / d;
    } catch (ex: Exception) {
              ~          [expected space before colon in variable-declaration]
        console.log(ex);
    }
}

function noPreceedingSpaceWithSubsequentSpacesMultiLineFn(
    a:   number,
    ~            [expected space before colon in parameter]
    b:   number
    ~            [expected space before colon in parameter]
):   number {
~          [expected space before colon in call-signature]
    var c:   number = a + b;
        ~            [expected space before colon in variable-declaration]
    var d:   number = a - b;
        ~            [expected space before colon in variable-declaration]

    try {
        return c / d;
    } catch (ex:   Exception) {
              ~            [expected space before colon in variable-declaration]
        console.log(ex);
    }
}

function withPreceedingSpaceNoSubsequentSpaceMultiLineFn(
    a :number,
       ~          [expected space after colon in parameter]
    b :number
       ~          [expected space after colon in parameter]
) :number {
   ~          [expected space after colon in call-signature]
    var c :number = a + b;
           ~          [expected space after colon in variable-declaration]
    var d :number = a - b;
           ~          [expected space after colon in variable-declaration]

    try {
        return c / d;
    } catch (ex :Exception) {
                 ~          [expected space after colon in variable-declaration]
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpaceMultiLineFn(
    a : number,
    b : number
) : number {
    var c : number = a + b;
    var d : number = a - b;

    try {
        return c / d;
    } catch (ex : Exception) {
        console.log(ex);
    }
}

function withPreceedingSpaceWithSubsequentSpacesMultiLineFn(
    a :   number,
    b :   number
) :   number {
    var c :   number = a + b;
    var d :   number = a - b;

    try {
        return c / d;
    } catch (ex :   Exception) {
        console.log(ex);
    }
}

function withPreceedingSpacesNoSubsequentSpaceMultiLineFn(
    a   :number,
         ~          [expected space after colon in parameter]
    b   :number
         ~          [expected space after colon in parameter]
)   :number {
     ~          [expected space after colon in call-signature]
    var c   :number = a + b;
             ~          [expected space after colon in variable-declaration]
    var d   :number = a - b;
             ~          [expected space after colon in variable-declaration]

    try {
        return c / d;
    } catch (ex   :Exception) {
                   ~          [expected space after colon in variable-declaration]
        console.log(ex);
    }
}

function withPreceedingSpacesWithSubsequentSpaceMultiLineFn(
    a   : number,
    b   : number
)   : number {
    var c   : number = a + b;
    var d   : number = a - b;

    try {
        return c / d;
    } catch (ex   : Exception) {
        console.log(ex);
    }
}

function withPreceedingSpacesWithSubsequentSpacesMultiLineFn(
    a   :   number,
    b   :   number
)   :   number {
    var c   :   number = a + b;
    var d   :   number = a - b;

    try {
        return c / d;
    } catch (ex   :   Exception) {
        console.log(ex);
    }
}

// endregion

// region CallSignaturePaddedParams

function noPreceedingSpaceNoSubsequentSpaceSignature( ):{};
                                                      ~            [expected space before colon in call-signature]
                                                        ~          [expected space after colon in call-signature]

function noPreceedingSpaceWithSubsequentSpaceSignature( ): {};
                                                        ~          [expected space before colon in call-signature]

function noPreceedingSpaceWithSubsequentSpacesSignature( ):   {};
                                                         ~            [expected space before colon in call-signature]

function withPreceedingSpaceNoSubsequentSpaceSignature( ) :{};
                                                           ~          [expected space after colon in call-signature]

function withPreceedingSpaceWithSubsequentSpaceSignature( ) : {};

function withPreceedingSpaceWithSubsequentSpacesSignature( ) :   {};

function withPreceedingSpacesNoSubsequentSpaceSignature( )   :{};
                                                              ~          [expected space after colon in call-signature]

function withPreceedingSpacesWithSubsequentSpaceSignature( )   : {};

function withPreceedingSpacesWithSubsequentSpacesSignature( )   :   {};

function withPreceedingSpaceNoSubsequentSpaceAndNewLineSignature( ) :
    {};

function withPreceedingSpaceWithSubsequentSpaceAndNewLineSignature( ) : 
                                                                       ~ [trailing whitespace]
    {};

// endregion

// region Class

class NoPreceedingSpaceNoSubsequentSpaceClass {
    [index:number]:string
         ~                    [expected space before colon in parameter]
           ~                  [expected space after colon in parameter]
                 ~            [expected space before colon in index-signature]
                   ~          [expected space after colon in index-signature]

    Prop:string = "some property";
       ~            [expected space before colon in property-declaration]
         ~          [expected space after colon in property-declaration]

    public get name():string {
                    ~            [expected space before colon in call-signature]
                      ~          [expected space after colon in call-signature]
        return "some name";
    }

    public set name(a:string):void {}
                    ~                    [expected space before colon in parameter]
                      ~                  [expected space after colon in parameter]
                            ~            [expected space before colon in call-signature]
                              ~          [expected space after colon in call-signature]

    public shemp(
        a:number,
        ~            [expected space before colon in parameter]
          ~          [expected space after colon in parameter]
        b:number
        ~            [expected space before colon in parameter]
          ~          [expected space after colon in parameter]
    ):void {}
    ~            [expected space before colon in call-signature]
      ~          [expected space after colon in call-signature]
}

class NoPreceedingSpaceWithSubsequentSpaceClass {
    [index: number]: string
         ~                   [expected space before colon in parameter]
                  ~          [expected space before colon in index-signature]

    Prop: string = "some property";
       ~          [expected space before colon in property-declaration]

    public get name(): string {
                    ~          [expected space before colon in call-signature]
        return "some name";
    }

    public set name(a: string): void {}
                    ~                   [expected space before colon in parameter]
                             ~          [expected space before colon in call-signature]

    public shemp(
        a: number,
        ~          [expected space before colon in parameter]
        b: number
        ~          [expected space before colon in parameter]
    ): void {}
    ~          [expected space before colon in call-signature]
}

class NoPreceedingSpaceWithSubsequentSpacesClass {
    [index:   number]:   string
         ~                       [expected space before colon in parameter]
                    ~            [expected space before colon in index-signature]

    Prop:   string = "some property";
       ~            [expected space before colon in property-declaration]

    public get name():   string {
                    ~            [expected space before colon in call-signature]
        return "some name";
    }

    public set name(a:   string):   void {}
                    ~                       [expected space before colon in parameter]
                               ~            [expected space before colon in call-signature]

    public shemp(
        a:   number,
        ~            [expected space before colon in parameter]
        b:   number
        ~            [expected space before colon in parameter]
    ):   void {}
    ~            [expected space before colon in call-signature]
}

class WithPreceedingSpaceNoSubsequentSpaceClass {
    [index :number] :string
            ~                   [expected space after colon in parameter]
                     ~          [expected space after colon in index-signature]

    Prop :string = "some property";
          ~          [expected space after colon in property-declaration]

    public get name() :string {
                       ~          [expected space after colon in call-signature]
        return "some name";
    }

    public set name(a :string) :void {}
                       ~                   [expected space after colon in parameter]
                                ~          [expected space after colon in call-signature]

    public shemp(
        a :number,
           ~          [expected space after colon in parameter]
        b :number
           ~          [expected space after colon in parameter]
    ) :void {}
       ~          [expected space after colon in call-signature]
}

class WithPreceedingSpaceWithSubsequentSpaceClass {
    [index : number] : string

    Prop : string = "some property";

    public get name() : string {
        return "some name";
    }

    public set name(a : string) : void {}

    public shemp(
        a : number,
        b : number
    ) : void {}
}

class WithPreceedingSpaceWithSubsequentSpacesClass {
    [index :   number] :   string

    Prop :   string = "some property";

    public get name() :   string {
        return "some name";
    }

    public set name(a :   string) :   void {}

    public shemp(
        a :   number,
        b :   number
    ) :   void {}
}

class WithPreceedingSpacesNoSubsequentSpaceClass {
    [index   :number]   :string
              ~                     [expected space after colon in parameter]
                         ~          [expected space after colon in index-signature]

    Prop   :string = "some property";
            ~          [expected space after colon in property-declaration]

    public get name()   :string {
                         ~          [expected space after colon in call-signature]
        return "some name";
    }

    public set name(a   :string)   :void {}
                         ~                     [expected space after colon in parameter]
                                    ~          [expected space after colon in call-signature]

    public shemp(
        a   :number,
             ~          [expected space after colon in parameter]
        b   :number
             ~          [expected space after colon in parameter]
    )   :void {}
         ~          [expected space after colon in call-signature]
}

class WithPreceedingSpacesWithSubsequentSpaceClass {
    [index   : number]   : string

    Prop   : string = "some property";

    public get name()   : string {
        return "some name";
    }

    public set name(a   : string)   : void {}

    public shemp(
        a   : number,
        b   : number
    )   : void {}
}

class WithPreceedingSpacesWithSubsequentSpacesClass {
    [index   :   number]   :   string

    Prop   :   string = "some property";

    public get name()   :   string {
        return "some name";
    }

    public set name(a   :   string)   :   void {}

    public shemp(
        a   :   number,
        b   :   number
    )   :   void {}
}

class WithPreceedingSpaceNoSubsequentSpaceAndNewLineClass {
    [index :
        number] :
        string

    Prop :
        string = "some property";

    public get name() :
        string {
        return "some name";
    }

    public set name(a :
        string) :
        void {}

    public shemp(
        a :
        number,
        b :
        number
    ) :
    void {}
}

class WithPreceedingSpaceWithSubsequentSpaceAndNewLineClass {
    [index : 
            ~ [trailing whitespace]
    number] : 
             ~ [trailing whitespace]
        string

    Prop : 
          ~ [trailing whitespace]
        string = "some property";

    public get name() : 
                       ~ [trailing whitespace]
        string {
        return "some name";
    }

    public set name(a : 
                       ~ [trailing whitespace]
        string) : 
                 ~ [trailing whitespace]
        void {}

    public shemp(
        a : 
           ~ [trailing whitespace]
        number,
        b : 
           ~ [trailing whitespace]
        number
    ) : 
       ~ [trailing whitespace]
    void {}
}

// endregion
