type Generic<T> = [T];
type GenericVoid = Generic<void>;
                           ~~~~ [0]

function takeVoid(thing: void) { }
                         ~~~~ [0]

let voidPromise: Promise<void> = new Promise<void>(() => {});
                         ~~~~ [0]
                                             ~~~~ [0]

let voidMap: Map<string, void> = new Map<string, void>();
                         ~~~~ [0]
                                                 ~~~~ [0]

[0]: void is only valid as a return type
