const a = 1;

// different reassignments
let b = 1;
b = 2;
let b1 = 1;
b1++;
let b2 = 1;
b2--;
let b3 = 1;
b3 /= 2;
let b4 = 1;
--b4;

// basic failure
let c = 1; // failure
    ~                 [Identifier 'c' is never reassigned; use 'const' instead of 'let'.]

// multiple declarations
const c5 = 5, c6 = 6;
let c1 = 1, c2 = 2; // 2 failures
    ~~                            [Identifier 'c1' is never reassigned; use 'const' instead of 'let'.]
            ~~                    [Identifier 'c2' is never reassigned; use 'const' instead of 'let'.]
let c3 = 1, c4 = 2; // 1 failure
            ~~                   [Identifier 'c4' is never reassigned; use 'const' instead of 'let'.]
c3 = 4;

// destructuring
{
    let destructLater = 4;
    [destructLater] = 5;
    let a: number;
    let b: number;
    let c: any;
    ({ eh: a, b, ...c } = { eh: 0, b: 1 });
}

let {h, i} = {h: 1, i: 1}; // failure for 'h'
     ~                                        [Identifier 'h' is never reassigned; use 'const' instead of 'let'.]
let [j, k] = [1, 1]; // failure for 'j'
     ~                                  [Identifier 'j' is never reassigned; use 'const' instead of 'let'.]
let [x1, x3] = [1, 2], [x2] = [3]; // failure for x1, x3
     ~~                                                  [Identifier 'x1' is never reassigned; use 'const' instead of 'let'.]
         ~~                                              [Identifier 'x3' is never reassigned; use 'const' instead of 'let'.]
let {a: {b: {q}, c: {r}}} = { a: { b: { q: 3 }, c: { r: 2 } } }; // failure for 'r'
                     ~                                                              [Identifier 'r' is never reassigned; use 'const' instead of 'let'.]
i = 2;
k = 2;
q = 4;
x2 = 5;

// functions
function myFunc(d: number, e: number) {
    let f = 1; // failure
        ~                 [Identifier 'f' is never reassigned; use 'const' instead of 'let'.]
    const g = 1;
    d = 2;
}
function myFunc2() {
    let [l, m] = [1, 1]; // failure for 'l'
         ~                                  [Identifier 'l' is never reassigned; use 'const' instead of 'let'.]
    m = 2;
    return l;
}

// for-of
for (let n of [1, 1]) { // failure for 'n'
         ~                                 [Identifier 'n' is never reassigned; use 'const' instead of 'let'.]
    console.log(n);
}
for (let {o, p} of [{1, 1}, {1, 1}]) { // failure for 'o'
          ~                                               [Identifier 'o' is never reassigned; use 'const' instead of 'let'.]
    console.log(o);
    p = 2;
}

// for loop
for (let i1 = 0; i1 < 4; i1++) {
}
for (let i2 = 0;;) {    // failure
         ~~                        [Identifier 'i2' is never reassigned; use 'const' instead of 'let'.]
}
for (const i2 = 0;;) {    // failure
}

// scope
let sc = 0;
let sc1 = 0;
    ~~~      [Identifier 'sc1' is never reassigned; use 'const' instead of 'let'.]
let sc2 = 0;
let sc3 = 0;
{
    sc = 1;
}
for(;;) {
    sc2 = 3;
}
class MyClass {
    private classVar = 5;
    public Increment() {
        let sc4 = 0;
        let sc5 = 0;    // error
            ~~~                  [Identifier 'sc5' is never reassigned; use 'const' instead of 'let'.]
        this.classVar++;
        sc3++;
        sc4++;
    }
}

// separate declaration and assignment (no error)
let x: number;
x = 5;

// ignores RHS of declaration
let usedAsRHS = 3;
    ~~~~~~~~~                  [Identifier 'usedAsRHS' is never reassigned; use 'const' instead of 'let'.]
let LHS: number | string = usedAsRHS;
    ~~~                  [Identifier 'LHS' is never reassigned; use 'const' instead of 'let'.]

// handle nested declaration
let nest = () => {
    ~~~~          [Identifier 'nest' is never reassigned; use 'const' instead of 'let'.]
    const a = 4;
    let b = 0;
    let c = 1;
        ~      [Identifier 'c' is never reassigned; use 'const' instead of 'let'.]
    b = 2;
    return a + b + c;
};

let nest2 = () => {
    ~~~~~           [Identifier 'nest2' is never reassigned; use 'const' instead of 'let'.]
    try {
    } catch(error) {
    }
}

// export
export let x = 4;

// array
let arr = [];
    ~~~           [Identifier 'arr' is never reassigned; use 'const' instead of 'let'.]
arr.push(0);
arr[1] = 1;
arr.length = 1;

// reassignment of the forward declaration
function useOfForwardDecl() {
    forwardDecl = 1;
}

let forwardDecl: number;

module E {
    let x = 1;
        ~      [Identifier 'x' is never reassigned; use 'const' instead of 'let'.]
}

switch (1) {
    case 1:
        let x = 1;
            ~      [Identifier 'x' is never reassigned; use 'const' instead of 'let'.]
        break;
    case 2:
        let y = 1;
            ~      [Identifier 'y' is never reassigned; use 'const' instead of 'let'.]
        break;
}