<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TSLint</title>
    <description>TSLint documentation. A linter for the TypeScript language.
</description>
    <link>https://palantir.github.io//tslint/</link>
    <atom:link href="https://palantir.github.io//tslint/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 18 Jul 2016 14:56:16 -0400</pubDate>
    <lastBuildDate>Mon, 18 Jul 2016 14:56:16 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Sharable Configurations and Rules</title>
        <description>&lt;p&gt;With the release of &lt;a href=&quot;https://github.com/palantir/tslint/releases&quot;&gt;TSLint v3.7.0&lt;/a&gt; comes a few new features that will make configuration files (aka &lt;a href=&quot;/tslint/usage/tslint-json&quot;&gt;&lt;code&gt;tslint.json&lt;/code&gt; files&lt;/a&gt;)
easier to maintain and share. The crux of the changes is a new &lt;code&gt;extends&lt;/code&gt; field,  which when provided indicates that a configuration
file augments another configuration file.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Let’s imagine you’ve created some custom rules and want to share them with others.
You also have a couple of configurations for them you want to share.&lt;/p&gt;

&lt;p&gt;Here’s the layout of our NPM package, which we’ll call &lt;code&gt;shared-tslint-rules&lt;/code&gt;. We have a directory with rules,
as well as a few different config files for TSLint.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
shared-tslint-rules
├── package.json
├── rules
│   ├── noAdditionRule.js
│   ├── noErrorsRule.js
│   └── noExcessiveCommentingRule.js
├── tslint-base.json
├── tslint-config.json
└── tslint-crazy-config.js
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our starting-point config file just references the directory the custom rules are in
but doesn’t enable any of them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tslint-base.json&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;json
{
    &quot;rulesDirectory&quot;: &quot;./rules&quot;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We also want to provide a sane default config for our rules.
Notice how it extends our base config, so we don’t have to redeclare &lt;code&gt;rulesDirectory&lt;/code&gt; here:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tslint-config.json&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;json
{
    &quot;extends&quot;: &quot;./tslint-base.json&quot;,
    &quot;rules&quot;: {
        &quot;no-errors&quot;: true,
        &quot;no-addition&quot;: false
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can even make a crazy config file for fun that gives you back a different config
each time you run TSLint. Notice how this is a &lt;code&gt;.js&lt;/code&gt; file that exports an object:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tslint-crazy-config.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
module.exports = {
    extends: &quot;./tslint-base.json&quot;,
    rules: {
        &quot;no-excessive-commenting&quot;: [true, {maxComments: Math.random() * 10}]
    }
};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, we have our &lt;code&gt;package.json&lt;/code&gt; file which references our base config file through its &lt;code&gt;main&lt;/code&gt; field:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;json
{
  &quot;name&quot;: &quot;shared-tslint-rules&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;Some TSLint rules that are great!&quot;,
  &quot;main&quot;: &quot;tslint-base.json&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
  },
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;MIT&quot;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can publish our package on NPM to let the world use it!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now let’s say we’re a user, and we want to use the custom rules above to lint our code.
First, we’ll make sure we have the necessary npm packages installed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
npm install -g tslint shared-tslint-rules
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, in our &lt;code&gt;tslint.json&lt;/code&gt; file for our project, we can reference the package of custom rules with &lt;code&gt;extends&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
{
    &quot;extends&quot;: &quot;shared-tslint-rules/tslint-config&quot;,
    &quot;rules&quot;: {
        &quot;no-addition&quot;: true
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and that’s all we have to do to use the custom rules!
We can now run TSLint as we would normally and see any lint errors produced by the custom rules:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
tslint -c path/to/tslint.json my/files/**/to/lint.ts
&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 11:19:00 -0400</pubDate>
        <link>https://palantir.github.io//tslint/2016/03/31/sharable-configurations-rules.html</link>
        <guid isPermaLink="true">https://palantir.github.io//tslint/2016/03/31/sharable-configurations-rules.html</guid>
        
        
      </item>
    
      <item>
        <title>A New TSLint Website</title>
        <description>&lt;p&gt;As TSLint has grown in usage and popularity alongside of TypeScript, it also has
evolved in terms of functionality and complexity. Today, all sorts of projects and products,
from &lt;a href=&quot;https://angular.io/&quot;&gt;Angular 2&lt;/a&gt; to the &lt;a href=&quot;https://github.com/Microsoft/TypeScript&quot;&gt;TypeScript compiler itself&lt;/a&gt; use TSLint
to help keep their code high-quality.&lt;/p&gt;

&lt;p&gt;Unfortunately, we’ve done a poor job of scaling the documentation and guides for TSLint as it has grown.
For example, the only good way to see the possible rules TSLint can enforce and what they can do is to scroll through the quite-long &lt;a href=&quot;https://github.com/palantir/tslint/blob/409aa6e4aa4b63da11fd61e15b26b0100cf1e845/README.md&quot;&gt;TSLint README&lt;/a&gt;.
Each rule is accompanied by a short description of its functionality, but nowhere does it explain why the rule is actually useful.
There’s also a short description of the rule’s options, but the syntax for specifying these options is often unclear.&lt;/p&gt;

&lt;p&gt;This website, in its current, very simple form, marks the beginning of a renewed focus on developer and user experience. But it’s just the tip of the iceberg in changes to come - other things in progress include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/palantir/tslint/issues/830&quot;&gt;A documentation overhaul&lt;/a&gt; that will provide
more comprehensive and clear documentation on TSLint and will make it easier to navigate that documentation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/palantir/tslint/pull/871&quot;&gt;A new &lt;code&gt;--init&lt;/code&gt; feature&lt;/a&gt; in the TSLint CLI that will make it easier to
generate a sensible initial &lt;code&gt;tslint.json&lt;/code&gt; config file.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/palantir/tslint/issues/831&quot;&gt;An improved contributor experience&lt;/a&gt; that will make things easier for those who want to contribute code to TSLint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feedback is always great, so please comment on any of the above GitHub issues and let us know what you would like to see to make TSLint user experience even better!&lt;/p&gt;

</description>
        <pubDate>Thu, 10 Dec 2015 15:15:21 -0500</pubDate>
        <link>https://palantir.github.io//tslint/2015/12/10/a-new-tslint-website.html</link>
        <guid isPermaLink="true">https://palantir.github.io//tslint/2015/12/10/a-new-tslint-website.html</guid>
        
        
      </item>
    
  </channel>
</rss>
