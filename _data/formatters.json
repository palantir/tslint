[
  {
    "formatterName": "checkstyle",
    "description": "Formats errors as through they were Checkstyle output.",
    "descriptionDetails": "\nImitates the XMLLogger from Checkstyle 4.3. All failures have the 'warning' severity.",
    "sample": "\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<checkstyle version=\"4.3\">\n    <file name=\"myFile.ts\">\n        <error line=\"1\" column=\"14\" severity=\"warning\" message=\"Missing semicolon\" source=\"failure.tslint.semicolon\" />\n    </file>\n</checkstyle>",
    "consumer": "machine"
  },
  {
    "formatterName": "codeFrame",
    "description": "Framed formatter which creates a frame of error code.",
    "descriptionDetails": "\nPrints syntax highlighted code in a frame with a pointer to where\nexactly lint error is happening.",
    "sample": "\nsrc/components/Payment.tsx\nParentheses are required around the parameters of an arrow function definition (arrow-parens)\n  21 |     public componentDidMount() {\n  22 |         this.input.focus();\n> 23 |         loadStripe().then(Stripe => Stripe.pay());\n     |                          ^\n  24 |     }\n  25 |\n  26 |     public render() {",
    "consumer": "human"
  },
  {
    "formatterName": "filesList",
    "description": "Lists files containing lint errors.",
    "sample": "directory/myFile.ts",
    "consumer": "machine"
  },
  {
    "formatterName": "json",
    "description": "Formats errors as simple JSON.",
    "sample": "\n[\n    {\n        \"endPosition\": {\n            \"character\": 13,\n            \"line\": 0,\n            \"position\": 13\n        },\n        \"failure\": \"Missing semicolon\",\n        \"fix\": {\n            \"innerStart\": 13,\n            \"innerLength\": 0,\n            \"innerText\": \";\"\n        },\n        \"name\": \"myFile.ts\",\n        \"ruleName\": \"semicolon\",\n        \"startPosition\": {\n            \"character\": 13,\n            \"line\": 0,\n            \"position\": 13\n        }\n    }\n]",
    "consumer": "machine"
  },
  {
    "formatterName": "junit",
    "description": "Formats errors as through they were JUnit output.",
    "descriptionDetails": "\nImitates the JUnit XML Output",
    "sample": "\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<testsuites package=\"tslint\">\n  <testsuite name=\"myFile.ts\">\n    <testcase name=\"Line 1, Column 14: semicolon\">\n      <failure type=\"warning\">Missing semicolon</failure>\n    </testcase>\n  </testsuite>\n</testsuites>\n",
    "consumer": "machine"
  },
  {
    "formatterName": "msbuild",
    "description": "Formats errors for consumption by msbuild.",
    "descriptionDetails": "The output is compatible with both msbuild and Visual Studio.",
    "sample": "myFile.ts(1,14): warning: Missing semicolon",
    "consumer": "machine"
  },
  {
    "formatterName": "pmd",
    "description": "Formats errors as through they were PMD output.",
    "descriptionDetails": "Imitates the XML output from PMD. All errors have a priority of 1.",
    "sample": "\n<pmd version=\"tslint\">\n    <file name=\"myFile.ts\">\n        <violation begincolumn=\"14\" beginline=\"1\" priority=\"3\" rule=\"Missing semicolon\"></violation>\n    </file>\n</pmd>",
    "consumer": "machine"
  },
  {
    "formatterName": "prose",
    "description": "The default formatter which outputs simple human-readable messages.",
    "sample": "ERROR: myFile.ts[1, 14]: Missing semicolon",
    "consumer": "human"
  },
  {
    "formatterName": "stylish",
    "description": "Human-readable formatter which creates stylish messages.",
    "descriptionDetails": "\nThe output matches what is produced by ESLint's stylish formatter.\nIts readability is enhanced through spacing and colouring.",
    "sample": "\nmyFile.ts\n1:14  semicolon  Missing semicolon",
    "consumer": "human"
  },
  {
    "formatterName": "tap",
    "description": "Formats output as TAP stream.",
    "descriptionDetails": "Provides error messages output in TAP13 format which can be consumed by any TAP formatter.",
    "sample": "\nTAP version 13\n1..1\nnot ok 1 - Some error\n  ---\n  message: Variable has any type\n  severity: error\n  data:\n     ruleName: no-any\n     fileName: test-file.ts\n     line: 10\n     character: 10\n     failureString: Some error\n     rawLines: Some raw output\n  ...",
    "consumer": "machine"
  },
  {
    "formatterName": "verbose",
    "description": "The human-readable formatter which includes the rule name in messages.",
    "descriptionDetails": "The output is the same as the prose formatter with the rule name included",
    "sample": "ERROR: (semicolon) myFile.ts[1, 14]: Missing semicolon",
    "consumer": "human"
  },
  {
    "formatterName": "vso",
    "description": "Formats output as VSO/TFS logging commands.",
    "descriptionDetails": "\nIntegrates with Visual Studio Online and Team Foundation Server by outputting errors\nas 'warning' logging commands.",
    "sample": "##vso[task.logissue type=warning;sourcepath=myFile.ts;linenumber=1;columnnumber=14;code=semicolon;]Missing semicolon",
    "consumer": "machine"
  }
]